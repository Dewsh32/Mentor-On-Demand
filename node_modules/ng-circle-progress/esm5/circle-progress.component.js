import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, Inject, ElementRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { timer } from 'rxjs';
var CircleProgressOptions = /** @class */ (function () {
    function CircleProgressOptions() {
        this.class = '';
        this.backgroundGradient = false;
        this.backgroundColor = 'transparent';
        this.backgroundGradientStopColor = 'transparent';
        this.backgroundOpacity = 1;
        this.backgroundStroke = 'transparent';
        this.backgroundStrokeWidth = 0;
        this.backgroundPadding = 5;
        this.percent = 0;
        this.radius = 90;
        this.space = 4;
        this.toFixed = 0;
        this.maxPercent = 1000;
        this.renderOnClick = true;
        this.units = '%';
        this.unitsFontSize = '10';
        this.unitsFontWeight = 'normal';
        this.unitsColor = '#444444';
        this.outerStrokeGradient = false;
        this.outerStrokeWidth = 8;
        this.outerStrokeColor = '#78C000';
        this.outerStrokeGradientStopColor = 'transparent';
        this.outerStrokeLinecap = 'round';
        this.innerStrokeColor = '#C7E596';
        this.innerStrokeWidth = 4;
        this.titleFormat = undefined;
        this.title = 'auto';
        this.titleColor = '#444444';
        this.titleFontSize = '20';
        this.titleFontWeight = 'normal';
        this.subtitleFormat = undefined;
        this.subtitle = 'progress';
        this.subtitleColor = '#A9A9A9';
        this.subtitleFontSize = '10';
        this.subtitleFontWeight = 'normal';
        this.imageSrc = undefined;
        this.imageHeight = undefined;
        this.imageWidth = undefined;
        this.animation = true;
        this.animateTitle = true;
        this.animateSubtitle = false;
        this.animationDuration = 500;
        this.showTitle = true;
        this.showSubtitle = true;
        this.showUnits = true;
        this.showImage = false;
        this.showBackground = true;
        this.showInnerStroke = true;
        this.clockwise = true;
        this.responsive = false;
        this.startFromZero = true;
        this.showZeroOuterStroke = true;
        this.lazy = false;
    }
    return CircleProgressOptions;
}());
export { CircleProgressOptions };
/** @dynamic Prevent compiling error when using type `Document` https://github.com/angular/angular/issues/20351 */
var CircleProgressComponent = /** @class */ (function () {
    function CircleProgressComponent(defaultOptions, elRef, document) {
        var _this = this;
        this.elRef = elRef;
        this.document = document;
        this.onClick = new EventEmitter();
        // <svg> of component
        this.svgElement = null;
        // whether <svg> is in viewport
        this.isInViewport = false;
        // event for notifying viewport change caused by scrolling or resizing
        this.onViewportChanged = new EventEmitter;
        this._viewportChangedSubscriber = null;
        this.options = new CircleProgressOptions();
        this.defaultOptions = new CircleProgressOptions();
        this._lastPercent = 0;
        this._gradientUUID = null;
        this.render = function () {
            _this.applyOptions();
            if (_this.options.lazy) {
                // Draw svg if it doesn't exist
                _this.svgElement === null && _this.draw(_this._lastPercent);
                // Draw it only when it's in the viewport
                if (_this.isInViewport) {
                    // Draw it at the latest position when I am in.
                    if (_this.options.animation && _this.options.animationDuration > 0) {
                        _this.animate(_this._lastPercent, _this.options.percent);
                    }
                    else {
                        _this.draw(_this.options.percent);
                    }
                    _this._lastPercent = _this.options.percent;
                }
            }
            else {
                if (_this.options.animation && _this.options.animationDuration > 0) {
                    _this.animate(_this._lastPercent, _this.options.percent);
                }
                else {
                    _this.draw(_this.options.percent);
                }
                _this._lastPercent = _this.options.percent;
            }
        };
        this.polarToCartesian = function (centerX, centerY, radius, angleInDegrees) {
            var angleInRadius = angleInDegrees * Math.PI / 180;
            var x = centerX + Math.sin(angleInRadius) * radius;
            var y = centerY - Math.cos(angleInRadius) * radius;
            return { x: x, y: y };
        };
        this.draw = function (percent) {
            var _a, _b, e_1, _c, e_2, _d;
            // make percent reasonable
            percent = (percent === undefined) ? _this.options.percent : Math.abs(percent);
            // circle percent shouldn't be greater than 100%.
            var circlePercent = (percent > 100) ? 100 : percent;
            // determine box size
            var boxSize = _this.options.radius * 2 + _this.options.outerStrokeWidth * 2;
            if (_this.options.showBackground) {
                boxSize += (_this.options.backgroundStrokeWidth * 2 + _this.max(0, _this.options.backgroundPadding * 2));
            }
            // the centre of the circle
            var centre = { x: boxSize / 2, y: boxSize / 2 };
            // the start point of the arc
            var startPoint = { x: centre.x, y: centre.y - _this.options.radius };
            // get the end point of the arc
            var endPoint = _this.polarToCartesian(centre.x, centre.y, _this.options.radius, 360 * (_this.options.clockwise ?
                circlePercent :
                (100 - circlePercent)) / 100); // ####################
            // We'll get an end point with the same [x, y] as the start point when percent is 100%, so move x a little bit.
            if (circlePercent === 100) {
                endPoint.x = endPoint.x + (_this.options.clockwise ? -0.01 : +0.01);
            }
            // largeArcFlag and sweepFlag
            var largeArcFlag, sweepFlag;
            if (circlePercent > 50) {
                _a = tslib_1.__read(_this.options.clockwise ? [1, 1] : [1, 0], 2), largeArcFlag = _a[0], sweepFlag = _a[1];
            }
            else {
                _b = tslib_1.__read(_this.options.clockwise ? [0, 1] : [0, 0], 2), largeArcFlag = _b[0], sweepFlag = _b[1];
            }
            // percent may not equal the actual percent
            var titlePercent = _this.options.animateTitle ? percent : _this.options.percent;
            var titleTextPercent = titlePercent > _this.options.maxPercent ?
                _this.options.maxPercent.toFixed(_this.options.toFixed) + "+" : titlePercent.toFixed(_this.options.toFixed);
            var subtitlePercent = _this.options.animateSubtitle ? percent : _this.options.percent;
            // get title object
            var title = {
                x: centre.x,
                y: centre.y,
                textAnchor: 'middle',
                color: _this.options.titleColor,
                fontSize: _this.options.titleFontSize,
                fontWeight: _this.options.titleFontWeight,
                texts: [],
                tspans: []
            };
            // from v0.9.9, both title and titleFormat(...) may be an array of string.
            if (_this.options.titleFormat !== undefined && _this.options.titleFormat.constructor.name === 'Function') {
                var formatted = _this.options.titleFormat(titlePercent);
                if (formatted instanceof Array) {
                    title.texts = tslib_1.__spread(formatted);
                }
                else {
                    title.texts.push(formatted.toString());
                }
            }
            else {
                if (_this.options.title === 'auto') {
                    title.texts.push(titleTextPercent);
                }
                else {
                    if (_this.options.title instanceof Array) {
                        title.texts = tslib_1.__spread(_this.options.title);
                    }
                    else {
                        title.texts.push(_this.options.title.toString());
                    }
                }
            }
            // get subtitle object
            var subtitle = {
                x: centre.x,
                y: centre.y,
                textAnchor: 'middle',
                color: _this.options.subtitleColor,
                fontSize: _this.options.subtitleFontSize,
                fontWeight: _this.options.subtitleFontWeight,
                texts: [],
                tspans: []
            };
            // from v0.9.9, both subtitle and subtitleFormat(...) may be an array of string.
            if (_this.options.subtitleFormat !== undefined && _this.options.subtitleFormat.constructor.name === 'Function') {
                var formatted = _this.options.subtitleFormat(subtitlePercent);
                if (formatted instanceof Array) {
                    subtitle.texts = tslib_1.__spread(formatted);
                }
                else {
                    subtitle.texts.push(formatted.toString());
                }
            }
            else {
                if (_this.options.subtitle instanceof Array) {
                    subtitle.texts = tslib_1.__spread(_this.options.subtitle);
                }
                else {
                    subtitle.texts.push(_this.options.subtitle.toString());
                }
            }
            // get units object
            var units = {
                text: "" + _this.options.units,
                fontSize: _this.options.unitsFontSize,
                fontWeight: _this.options.unitsFontWeight,
                color: _this.options.unitsColor
            };
            // get total count of text lines to be shown
            var rowCount = 0, rowNum = 1;
            _this.options.showTitle && (rowCount += title.texts.length);
            _this.options.showSubtitle && (rowCount += subtitle.texts.length);
            // calc dy for each tspan for title
            if (_this.options.showTitle) {
                try {
                    for (var _e = tslib_1.__values(title.texts), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var span = _f.value;
                        title.tspans.push({ span: span, dy: _this.getRelativeY(rowNum, rowCount) });
                        rowNum++;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_c = _e.return)) _c.call(_e);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            // calc dy for each tspan for subtitle
            if (_this.options.showSubtitle) {
                try {
                    for (var _g = tslib_1.__values(subtitle.texts), _h = _g.next(); !_h.done; _h = _g.next()) {
                        var span = _h.value;
                        subtitle.tspans.push({ span: span, dy: _this.getRelativeY(rowNum, rowCount) });
                        rowNum++;
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_h && !_h.done && (_d = _g.return)) _d.call(_g);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            // create ID for gradient element
            if (null === _this._gradientUUID) {
                _this._gradientUUID = _this.uuid();
            }
            // Bring it all together
            _this.svg = {
                viewBox: "0 0 " + boxSize + " " + boxSize,
                // Set both width and height to '100%' if it's responsive
                width: _this.options.responsive ? '100%' : boxSize,
                height: _this.options.responsive ? '100%' : boxSize,
                backgroundCircle: {
                    cx: centre.x,
                    cy: centre.y,
                    r: _this.options.radius + _this.options.outerStrokeWidth / 2 + _this.options.backgroundPadding,
                    fill: _this.options.backgroundColor,
                    fillOpacity: _this.options.backgroundOpacity,
                    stroke: _this.options.backgroundStroke,
                    strokeWidth: _this.options.backgroundStrokeWidth,
                },
                path: {
                    // A rx ry x-axis-rotation large-arc-flag sweep-flag x y (https://developer.mozilla.org/en/docs/Web/SVG/Tutorial/Paths#Arcs)
                    d: "M " + startPoint.x + " " + startPoint.y + "\n        A " + _this.options.radius + " " + _this.options.radius + " 0 " + largeArcFlag + " " + sweepFlag + " " + endPoint.x + " " + endPoint.y,
                    stroke: _this.options.outerStrokeColor,
                    strokeWidth: _this.options.outerStrokeWidth,
                    strokeLinecap: _this.options.outerStrokeLinecap,
                    fill: 'none'
                },
                circle: {
                    cx: centre.x,
                    cy: centre.y,
                    r: _this.options.radius - _this.options.space - _this.options.outerStrokeWidth / 2 - _this.options.innerStrokeWidth / 2,
                    fill: 'none',
                    stroke: _this.options.innerStrokeColor,
                    strokeWidth: _this.options.innerStrokeWidth,
                },
                title: title,
                units: units,
                subtitle: subtitle,
                image: {
                    x: centre.x - _this.options.imageWidth / 2,
                    y: centre.y - _this.options.imageHeight / 2,
                    src: _this.options.imageSrc,
                    width: _this.options.imageWidth,
                    height: _this.options.imageHeight,
                },
                outerLinearGradient: {
                    id: 'outer-linear-' + _this._gradientUUID,
                    colorStop1: _this.options.outerStrokeColor,
                    colorStop2: _this.options.outerStrokeGradientStopColor === 'transparent' ? '#FFF' : _this.options.outerStrokeGradientStopColor,
                },
                radialGradient: {
                    id: 'radial-' + _this._gradientUUID,
                    colorStop1: _this.options.backgroundColor,
                    colorStop2: _this.options.backgroundGradientStopColor === 'transparent' ? '#FFF' : _this.options.backgroundGradientStopColor,
                }
            };
        };
        this.getAnimationParameters = function (previousPercent, currentPercent) {
            var MIN_INTERVAL = 10;
            var times, step, interval;
            var fromPercent = _this.options.startFromZero ? 0 : (previousPercent < 0 ? 0 : previousPercent);
            var toPercent = currentPercent < 0 ? 0 : _this.min(currentPercent, _this.options.maxPercent);
            var delta = Math.abs(Math.round(toPercent - fromPercent));
            if (delta >= 100) {
                // we will finish animation in 100 times
                times = 100;
                if (!_this.options.animateTitle && !_this.options.animateSubtitle) {
                    step = 1;
                }
                else {
                    // show title or subtitle animation even if the arc is full, we also need to finish it in 100 times.
                    step = Math.round(delta / times);
                }
            }
            else {
                // we will finish in as many times as the number of percent.
                times = delta;
                step = 1;
            }
            // Get the interval of timer
            interval = Math.round(_this.options.animationDuration / times);
            // Readjust all values if the interval of timer is extremely small.
            if (interval < MIN_INTERVAL) {
                interval = MIN_INTERVAL;
                times = _this.options.animationDuration / interval;
                if (!_this.options.animateTitle && !_this.options.animateSubtitle && delta > 100) {
                    step = Math.round(100 / times);
                }
                else {
                    step = Math.round(delta / times);
                }
            }
            // step must be greater than 0.
            if (step < 1) {
                step = 1;
            }
            return { times: times, step: step, interval: interval };
        };
        this.animate = function (previousPercent, currentPercent) {
            if (_this._timerSubscription && !_this._timerSubscription.closed) {
                _this._timerSubscription.unsubscribe();
            }
            var fromPercent = _this.options.startFromZero ? 0 : previousPercent;
            var toPercent = currentPercent;
            var _a = _this.getAnimationParameters(fromPercent, toPercent), step = _a.step, interval = _a.interval;
            var count = fromPercent;
            if (fromPercent < toPercent) {
                _this._timerSubscription = timer(0, interval).subscribe(function () {
                    count += step;
                    if (count <= toPercent) {
                        if (!_this.options.animateTitle && !_this.options.animateSubtitle && count >= 100) {
                            _this.draw(toPercent);
                            _this._timerSubscription.unsubscribe();
                        }
                        else {
                            _this.draw(count);
                        }
                    }
                    else {
                        _this.draw(toPercent);
                        _this._timerSubscription.unsubscribe();
                    }
                });
            }
            else {
                _this._timerSubscription = timer(0, interval).subscribe(function () {
                    count -= step;
                    if (count >= toPercent) {
                        if (!_this.options.animateTitle && !_this.options.animateSubtitle && toPercent >= 100) {
                            _this.draw(toPercent);
                            _this._timerSubscription.unsubscribe();
                        }
                        else {
                            _this.draw(count);
                        }
                    }
                    else {
                        _this.draw(toPercent);
                        _this._timerSubscription.unsubscribe();
                    }
                });
            }
        };
        this.emitClickEvent = function (event) {
            if (_this.options.renderOnClick) {
                _this.animate(0, _this.options.percent);
            }
            _this.onClick.emit(event);
        };
        this.applyOptions = function () {
            var e_3, _a;
            try {
                // the options of <circle-progress> may change already
                for (var _b = tslib_1.__values(Object.keys(_this.options)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var name_1 = _c.value;
                    if (_this.hasOwnProperty(name_1) && _this[name_1] !== undefined) {
                        _this.options[name_1] = _this[name_1];
                    }
                    else if (_this.templateOptions && _this.templateOptions[name_1] !== undefined) {
                        _this.options[name_1] = _this.templateOptions[name_1];
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            // make sure key options valid
            _this.options.radius = Math.abs(+_this.options.radius);
            _this.options.space = +_this.options.space;
            _this.options.percent = +_this.options.percent > 0 ? +_this.options.percent : 0;
            _this.options.maxPercent = Math.abs(+_this.options.maxPercent);
            _this.options.animationDuration = Math.abs(_this.options.animationDuration);
            _this.options.outerStrokeWidth = Math.abs(+_this.options.outerStrokeWidth);
            _this.options.innerStrokeWidth = Math.abs(+_this.options.innerStrokeWidth);
            _this.options.backgroundPadding = +_this.options.backgroundPadding;
        };
        this.getRelativeY = function (rowNum, rowCount) {
            // why '-0.18em'? It's a magic number when property 'alignment-baseline' equals 'baseline'. :)
            var initialOffset = -0.18, offset = 1;
            return (initialOffset + offset * (rowNum - rowCount / 2)).toFixed(2) + 'em';
        };
        this.min = function (a, b) {
            return a < b ? a : b;
        };
        this.max = function (a, b) {
            return a > b ? a : b;
        };
        this.uuid = function () {
            // https://www.w3resource.com/javascript-exercises/javascript-math-exercise-23.php
            var dt = new Date().getTime();
            var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = (dt + Math.random() * 16) % 16 | 0;
                dt = Math.floor(dt / 16);
                return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
            });
            return uuid;
        };
        this.findSvgElement = function () {
            if (this.svgElement === null) {
                var tags = this.elRef.nativeElement.getElementsByTagName('svg');
                if (tags.length > 0) {
                    this.svgElement = tags[0];
                }
            }
        };
        this.checkViewport = function () {
            _this.findSvgElement();
            var previousValue = _this.isInViewport;
            _this.isInViewport = _this.isElementInViewport(_this.svgElement);
            if (previousValue !== _this.isInViewport) {
                _this.onViewportChanged.emit({ oldValue: previousValue, newValue: _this.isInViewport });
            }
        };
        this.onScroll = function (event) {
            _this.checkViewport();
        };
        this.loadEventsForLazyMode = function () {
            if (_this.options.lazy) {
                _this.document.addEventListener('scroll', _this.onScroll, true);
                _this.window.addEventListener('resize', _this.onScroll, true);
                if (_this._viewportChangedSubscriber === null) {
                    _this._viewportChangedSubscriber = _this.onViewportChanged.subscribe(function (_a) {
                        var oldValue = _a.oldValue, newValue = _a.newValue;
                        newValue ? _this.render() : null;
                    });
                }
                // svgElement must be created in DOM before being checked.
                // Is there a better way to check the existence of svgElemnt?
                var _timer_1 = timer(0, 50).subscribe(function () {
                    _this.svgElement === null ? _this.checkViewport() : _timer_1.unsubscribe();
                });
            }
        };
        this.unloadEventsForLazyMode = function () {
            // Remove event listeners
            _this.document.removeEventListener('scroll', _this.onScroll, true);
            _this.window.removeEventListener('resize', _this.onScroll, true);
            // Unsubscribe onViewportChanged
            if (_this._viewportChangedSubscriber !== null) {
                _this._viewportChangedSubscriber.unsubscribe();
                _this._viewportChangedSubscriber = null;
            }
        };
        this.document = document;
        this.window = this.document.defaultView;
        Object.assign(this.options, defaultOptions);
        Object.assign(this.defaultOptions, defaultOptions);
    }
    CircleProgressComponent.prototype.isDrawing = function () {
        return (this._timerSubscription && !this._timerSubscription.closed);
    };
    CircleProgressComponent.prototype.isElementInViewport = function (el) {
        // Return false if el has not been created in page.
        if (el === null || el === undefined)
            return false;
        // Check if the element is out of view due to a container scrolling
        var rect = el.getBoundingClientRect(), parent = el.parentNode, parentRect;
        do {
            parentRect = parent.getBoundingClientRect();
            if (rect.top >= parentRect.bottom)
                return false;
            if (rect.bottom <= parentRect.top)
                return false;
            if (rect.left >= parentRect.right)
                return false;
            if (rect.right <= parentRect.left)
                return false;
            parent = parent.parentNode;
        } while (parent != this.document.body);
        // Check its within the document viewport
        if (rect.top >= (this.window.innerHeight || this.document.documentElement.clientHeight))
            return false;
        if (rect.bottom <= 0)
            return false;
        if (rect.left >= (this.window.innerWidth || this.document.documentElement.clientWidth))
            return false;
        if (rect.right <= 0)
            return false;
        return true;
    };
    CircleProgressComponent.prototype.ngOnInit = function () {
        this.loadEventsForLazyMode();
    };
    CircleProgressComponent.prototype.ngOnDestroy = function () {
        this.unloadEventsForLazyMode();
    };
    CircleProgressComponent.prototype.ngOnChanges = function (changes) {
        this.render();
        if ('lazy' in changes) {
            changes.lazy.currentValue ? this.loadEventsForLazyMode() : this.unloadEventsForLazyMode();
        }
    };
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], CircleProgressComponent.prototype, "onClick", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "name", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "class", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CircleProgressComponent.prototype, "backgroundGradient", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "backgroundColor", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "backgroundGradientStopColor", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], CircleProgressComponent.prototype, "backgroundOpacity", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "backgroundStroke", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], CircleProgressComponent.prototype, "backgroundStrokeWidth", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], CircleProgressComponent.prototype, "backgroundPadding", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], CircleProgressComponent.prototype, "radius", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], CircleProgressComponent.prototype, "space", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], CircleProgressComponent.prototype, "percent", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], CircleProgressComponent.prototype, "toFixed", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], CircleProgressComponent.prototype, "maxPercent", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CircleProgressComponent.prototype, "renderOnClick", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "units", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "unitsFontSize", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "unitsFontWeight", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "unitsColor", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CircleProgressComponent.prototype, "outerStrokeGradient", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], CircleProgressComponent.prototype, "outerStrokeWidth", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "outerStrokeColor", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "outerStrokeGradientStopColor", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "outerStrokeLinecap", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "innerStrokeColor", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], CircleProgressComponent.prototype, "innerStrokeWidth", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Function)
    ], CircleProgressComponent.prototype, "titleFormat", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], CircleProgressComponent.prototype, "title", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "titleColor", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "titleFontSize", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "titleFontWeight", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Function)
    ], CircleProgressComponent.prototype, "subtitleFormat", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], CircleProgressComponent.prototype, "subtitle", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "subtitleColor", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "subtitleFontSize", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "subtitleFontWeight", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CircleProgressComponent.prototype, "imageSrc", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], CircleProgressComponent.prototype, "imageHeight", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], CircleProgressComponent.prototype, "imageWidth", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CircleProgressComponent.prototype, "animation", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CircleProgressComponent.prototype, "animateTitle", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CircleProgressComponent.prototype, "animateSubtitle", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], CircleProgressComponent.prototype, "animationDuration", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CircleProgressComponent.prototype, "showTitle", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CircleProgressComponent.prototype, "showSubtitle", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CircleProgressComponent.prototype, "showUnits", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CircleProgressComponent.prototype, "showImage", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CircleProgressComponent.prototype, "showBackground", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CircleProgressComponent.prototype, "showInnerStroke", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CircleProgressComponent.prototype, "clockwise", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CircleProgressComponent.prototype, "responsive", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CircleProgressComponent.prototype, "startFromZero", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CircleProgressComponent.prototype, "showZeroOuterStroke", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CircleProgressComponent.prototype, "lazy", void 0);
    tslib_1.__decorate([
        Input('options'),
        tslib_1.__metadata("design:type", CircleProgressOptions)
    ], CircleProgressComponent.prototype, "templateOptions", void 0);
    CircleProgressComponent = tslib_1.__decorate([
        Component({
            selector: 'circle-progress',
            template: "\n        <svg xmlns=\"http://www.w3.org/2000/svg\" *ngIf=\"svg\"\n             [attr.viewBox]=\"svg.viewBox\" preserveAspectRatio=\"xMidYMid meet\"\n             [attr.height]=\"svg.height\" [attr.width]=\"svg.width\" (click)=\"emitClickEvent($event)\" [attr.class]=\"options.class\">\n            <defs>\n                <linearGradient *ngIf=\"options.outerStrokeGradient\" [attr.id]=\"svg.outerLinearGradient.id\">\n                    <stop offset=\"5%\" [attr.stop-color]=\"svg.outerLinearGradient.colorStop1\"  [attr.stop-opacity]=\"1\"/>\n                    <stop offset=\"95%\" [attr.stop-color]=\"svg.outerLinearGradient.colorStop2\" [attr.stop-opacity]=\"1\"/>\n                </linearGradient>\n                <radialGradient *ngIf=\"options.backgroundGradient\" [attr.id]=\"svg.radialGradient.id\">\n                    <stop offset=\"5%\" [attr.stop-color]=\"svg.radialGradient.colorStop1\" [attr.stop-opacity]=\"1\"/>\n                    <stop offset=\"95%\" [attr.stop-color]=\"svg.radialGradient.colorStop2\" [attr.stop-opacity]=\"1\"/>\n                </radialGradient>\n            </defs>\n            <ng-container *ngIf=\"options.showBackground\">\n                <circle *ngIf=\"!options.backgroundGradient\"\n                        [attr.cx]=\"svg.backgroundCircle.cx\"\n                        [attr.cy]=\"svg.backgroundCircle.cy\"\n                        [attr.r]=\"svg.backgroundCircle.r\"\n                        [attr.fill]=\"svg.backgroundCircle.fill\"\n                        [attr.fill-opacity]=\"svg.backgroundCircle.fillOpacity\"\n                        [attr.stroke]=\"svg.backgroundCircle.stroke\"\n                        [attr.stroke-width]=\"svg.backgroundCircle.strokeWidth\"/>\n                <circle *ngIf=\"options.backgroundGradient\"\n                        [attr.cx]=\"svg.backgroundCircle.cx\"\n                        [attr.cy]=\"svg.backgroundCircle.cy\"\n                        [attr.r]=\"svg.backgroundCircle.r\"\n                        attr.fill=\"url(#{{svg.radialGradient.id}})\"\n                        [attr.fill-opacity]=\"svg.backgroundCircle.fillOpacity\"\n                        [attr.stroke]=\"svg.backgroundCircle.stroke\"\n                        [attr.stroke-width]=\"svg.backgroundCircle.strokeWidth\"/>\n            </ng-container>            \n            <circle *ngIf=\"options.showInnerStroke\"\n                    [attr.cx]=\"svg.circle.cx\"\n                    [attr.cy]=\"svg.circle.cy\"\n                    [attr.r]=\"svg.circle.r\"\n                    [attr.fill]=\"svg.circle.fill\"\n                    [attr.stroke]=\"svg.circle.stroke\"\n                    [attr.stroke-width]=\"svg.circle.strokeWidth\"/>\n            <ng-container *ngIf=\"+options.percent!==0 || options.showZeroOuterStroke\">\n                <path *ngIf=\"!options.outerStrokeGradient\"\n                        [attr.d]=\"svg.path.d\"\n                        [attr.stroke]=\"svg.path.stroke\"\n                        [attr.stroke-width]=\"svg.path.strokeWidth\"\n                        [attr.stroke-linecap]=\"svg.path.strokeLinecap\"\n                        [attr.fill]=\"svg.path.fill\"/>\n                <path *ngIf=\"options.outerStrokeGradient\"\n                        [attr.d]=\"svg.path.d\"\n                        attr.stroke=\"url(#{{svg.outerLinearGradient.id}})\"\n                        [attr.stroke-width]=\"svg.path.strokeWidth\"\n                        [attr.stroke-linecap]=\"svg.path.strokeLinecap\"\n                        [attr.fill]=\"svg.path.fill\"/>\n            </ng-container>\n            <text *ngIf=\"!options.showImage && (options.showTitle || options.showUnits || options.showSubtitle)\"\n                  alignment-baseline=\"baseline\"\n                  [attr.x]=\"svg.circle.cx\"\n                  [attr.y]=\"svg.circle.cy\"\n                  [attr.text-anchor]=\"svg.title.textAnchor\">\n                <ng-container *ngIf=\"options.showTitle\">\n                    <tspan *ngFor=\"let tspan of svg.title.tspans\"\n                           [attr.x]=\"svg.title.x\"\n                           [attr.y]=\"svg.title.y\"\n                           [attr.dy]=\"tspan.dy\"\n                           [attr.font-size]=\"svg.title.fontSize\"\n                           [attr.font-weight]=\"svg.title.fontWeight\"\n                           [attr.fill]=\"svg.title.color\">{{tspan.span}}</tspan>\n                </ng-container>\n                <tspan *ngIf=\"options.showUnits\"\n                       [attr.font-size]=\"svg.units.fontSize\"\n                       [attr.font-weight]=\"svg.units.fontWeight\"\n                       [attr.fill]=\"svg.units.color\">{{svg.units.text}}</tspan>\n                <ng-container *ngIf=\"options.showSubtitle\">\n                    <tspan *ngFor=\"let tspan of svg.subtitle.tspans\"\n                           [attr.x]=\"svg.subtitle.x\"\n                           [attr.y]=\"svg.subtitle.y\"\n                           [attr.dy]=\"tspan.dy\"\n                           [attr.font-size]=\"svg.subtitle.fontSize\"\n                           [attr.font-weight]=\"svg.subtitle.fontWeight\"\n                           [attr.fill]=\"svg.subtitle.color\">{{tspan.span}}</tspan>\n                </ng-container>\n            </text>\n            <image *ngIf=\"options.showImage\" preserveAspectRatio=\"none\" \n                [attr.height]=\"svg.image.height\"\n                [attr.width]=\"svg.image.width\"\n                [attr.xlink:href]=\"svg.image.src\"\n                [attr.x]=\"svg.image.x\"\n                [attr.y]=\"svg.image.y\"\n            />\n        </svg>\n    "
        }),
        tslib_1.__param(2, Inject(DOCUMENT)),
        tslib_1.__metadata("design:paramtypes", [CircleProgressOptions, ElementRef, Document])
    ], CircleProgressComponent);
    return CircleProgressComponent;
}());
export { CircleProgressComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2lyY2xlLXByb2dyZXNzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWNpcmNsZS1wcm9ncmVzcy8iLCJzb3VyY2VzIjpbImNpcmNsZS1wcm9ncmVzcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBYSxNQUFNLEVBQUUsTUFBTSxFQUFxQixVQUFVLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ3RJLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQWUsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBMER6QztJQUFBO1FBQ0ksVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUNYLHVCQUFrQixHQUFHLEtBQUssQ0FBQztRQUMzQixvQkFBZSxHQUFHLGFBQWEsQ0FBQztRQUNoQyxnQ0FBMkIsR0FBRyxhQUFhLENBQUM7UUFDNUMsc0JBQWlCLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLHFCQUFnQixHQUFHLGFBQWEsQ0FBQztRQUNqQywwQkFBcUIsR0FBRyxDQUFDLENBQUM7UUFDMUIsc0JBQWlCLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLFlBQU8sR0FBRyxDQUFDLENBQUM7UUFDWixXQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ1osVUFBSyxHQUFHLENBQUMsQ0FBQztRQUNWLFlBQU8sR0FBRyxDQUFDLENBQUM7UUFDWixlQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLGtCQUFhLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLFVBQUssR0FBRyxHQUFHLENBQUM7UUFDWixrQkFBYSxHQUFHLElBQUksQ0FBQztRQUNyQixvQkFBZSxHQUFHLFFBQVEsQ0FBQztRQUMzQixlQUFVLEdBQUcsU0FBUyxDQUFDO1FBQ3ZCLHdCQUFtQixHQUFHLEtBQUssQ0FBQztRQUM1QixxQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFDckIscUJBQWdCLEdBQUcsU0FB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QXVCO0lBQ3RCO1FBQVIsS0FBSyxFQUFFOztvRUFBMEI7SUFDekI7UUFBUixLQUFLLEVBQUU7O3NFQUEyQjtJQUUxQjtRQUFSLEtBQUssRUFBRTs7OERBQW9CO0lBQ25CO1FBQVIsS0FBSyxFQUFFOztpRUFBdUI7SUFDdEI7UUFBUixLQUFLLEVBQUU7OzhEQUFvQjtJQUNuQjtRQUFSLEtBQUssRUFBRTs7OERBQW9CO0lBQ25CO1FBQVIsS0FBSyxFQUFFOzttRUFBeUI7SUFDeEI7UUFBUixLQUFLLEVBQUU7O29FQUEwQjtJQUN6QjtRQUFSLEtBQUssRUFBRTs7OERBQW9CO0lBQ25CO1FBQVIsS0FBSyxFQUFFOzsrREFBcUI7SUFDcEI7UUFBUixLQUFLLEVBQUU7O2tFQUF3QjtJQUN2QjtRQUFSLEtBQUssRUFBRTs7d0VBQThCO0lBRTdCO1FBQVIsS0FBSyxFQUFFOzt5REFBZTtJQUVMO1FBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7MENBQWtCLHFCQUFxQjtvRUFBQztJQXJFaEQsdUJBQXVCO1FBN0ZuQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLFFBQVEsRUFBRSwwaExBeUZUO1NBQ0osQ0FBQztRQW1nQmlGLG1CQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtpREFBbkUscUJBQXFCLEVBQWlCLFVBQVUsRUFBc0MsUUFBUTtPQWxnQmpILHVCQUF1QixDQXlnQm5DO0lBQUQsOEJBQUM7Q0FBQSxBQXpnQkQsSUF5Z0JDO1NBemdCWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPdXRwdXQsIEluamVjdCwgT25Jbml0LCBPbkRlc3Ryb3ksIEVsZW1lbnRSZWYsIFNpbXBsZUNoYW5nZXN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0RPQ1VNRU5UfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQge1N1YnNjcmlwdGlvbiwgdGltZXJ9IGZyb20gJ3J4anMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDaXJjbGVQcm9ncmVzc09wdGlvbnNJbnRlcmZhY2Uge1xyXG4gICAgY2xhc3M/OiBzdHJpbmc7XHJcbiAgICBiYWNrZ3JvdW5kR3JhZGllbnQ/OiBib29sZWFuO1xyXG4gICAgYmFja2dyb3VuZENvbG9yPzogc3RyaW5nO1xyXG4gICAgYmFja2dyb3VuZEdyYWRpZW50U3RvcENvbG9yPzogc3RyaW5nO1xyXG4gICAgYmFja2dyb3VuZE9wYWNpdHk/OiBudW1iZXI7XHJcbiAgICBiYWNrZ3JvdW5kU3Ryb2tlPzogc3RyaW5nO1xyXG4gICAgYmFja2dyb3VuZFN0cm9rZVdpZHRoPzogbnVtYmVyO1xyXG4gICAgYmFja2dyb3VuZFBhZGRpbmc/OiBudW1iZXI7XHJcbiAgICBwZXJjZW50PzogbnVtYmVyO1xyXG4gICAgcmFkaXVzPzogbnVtYmVyO1xyXG4gICAgc3BhY2U/OiBudW1iZXI7XHJcbiAgICB0b0ZpeGVkPzogbnVtYmVyO1xyXG4gICAgbWF4UGVyY2VudD86IG51bWJlcjtcclxuICAgIHJlbmRlck9uQ2xpY2s/OiBib29sZWFuO1xyXG4gICAgdW5pdHM/OiBzdHJpbmc7XHJcbiAgICB1bml0c0ZvbnRTaXplPzogc3RyaW5nO1xyXG4gICAgdW5pdHNGb250V2VpZ2h0Pzogc3RyaW5nO1xyXG4gICAgdW5pdHNDb2xvcj86IHN0cmluZztcclxuICAgIG91dGVyU3Ryb2tlR3JhZGllbnQ/OiBib29sZWFuO1xyXG4gICAgb3V0ZXJTdHJva2VXaWR0aD86IG51bWJlcjtcclxuICAgIG91dGVyU3Ryb2tlQ29sb3I/OiBzdHJpbmc7XHJcbiAgICBvdXRlclN0cm9rZUdyYWRpZW50U3RvcENvbG9yPzogc3RyaW5nO1xyXG4gICAgb3V0ZXJTdHJva2VMaW5lY2FwPzogc3RyaW5nO1xyXG4gICAgaW5uZXJTdHJva2VDb2xvcj86IHN0cmluZztcclxuICAgIGlubmVyU3Ryb2tlV2lkdGg/OiBudW1iZXI7XHJcbiAgICB0aXRsZUZvcm1hdD86IEZ1bmN0aW9uO1xyXG4gICAgdGl0bGU/OiBzdHJpbmcgfCBBcnJheTxTdHJpbmc+O1xyXG4gICAgdGl0bGVDb2xvcj86IHN0cmluZztcclxuICAgIHRpdGxlRm9udFNpemU/OiBzdHJpbmc7XHJcbiAgICB0aXRsZUZvbnRXZWlnaHQ/OiBzdHJpbmc7XHJcbiAgICBzdWJ0aXRsZUZvcm1hdD86IEZ1bmN0aW9uO1xyXG4gICAgc3VidGl0bGU/OiBzdHJpbmcgfCBBcnJheTxTdHJpbmc+O1xyXG4gICAgc3VidGl0bGVDb2xvcj86IHN0cmluZztcclxuICAgIHN1YnRpdGxlRm9udFNpemU/OiBzdHJpbmc7XHJcbiAgICBzdWJ0aXRsZUZvbnRXZWlnaHQ/OiBzdHJpbmc7XHJcbiAgICBpbWFnZVNyYz86IHN0cmluZztcclxuICAgIGltYWdlSGVpZ2h0PzogbnVtYmVyO1xyXG4gICAgaW1hZ2VXaWR0aD86IG51bWJlcjsgICAgXHJcbiAgICBhbmltYXRpb24/OiBib29sZWFuO1xyXG4gICAgYW5pbWF0ZVRpdGxlPzogYm9vbGVhbjtcclxuICAgIGFuaW1hdGVTdWJ0aXRsZT86IGJvb2xlYW47XHJcbiAgICBhbmltYXRpb25EdXJhdGlvbj86IG51bWJlcjtcclxuICAgIHNob3dUaXRsZT86IGJvb2xlYW47XHJcbiAgICBzaG93U3VidGl0bGU/OiBib29sZWFuO1xyXG4gICAgc2hvd1VuaXRzPzogYm9vbGVhbjtcclxuICAgIHNob3dJbWFnZT86IGJvb2xlYW47XHJcbiAgICBzaG93QmFja2dyb3VuZD86IGJvb2xlYW47XHJcbiAgICBzaG93SW5uZXJTdHJva2U/OiBib29sZWFuO1xyXG4gICAgY2xvY2t3aXNlPzogYm9vbGVhbjtcclxuICAgIHJlc3BvbnNpdmU/OiBib29sZWFuO1xyXG4gICAgc3RhcnRGcm9tWmVybz86IGJvb2xlYW47XHJcbiAgICBzaG93WmVyb091dGVyU3Ryb2tlPzogYm9vbGVhbjtcclxuICAgIGxhenk/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ2lyY2xlUHJvZ3Jlc3NPcHRpb25zIGltcGxlbWVudHMgQ2lyY2xlUHJvZ3Jlc3NPcHRpb25zSW50ZXJmYWNlIHtcclxuICAgIGNsYXNzID0gJyc7XHJcbiAgICBiYWNrZ3JvdW5kR3JhZGllbnQgPSBmYWxzZTtcclxuICAgIGJhY2tncm91bmRDb2xvciA9ICd0cmFuc3BhcmVudCc7XHJcbiAgICBiYWNrZ3JvdW5kR3JhZGllbnRTdG9wQ29sb3IgPSAndHJhbnNwYXJlbnQnO1xyXG4gICAgYmFja2dyb3VuZE9wYWNpdHkgPSAxO1xyXG4gICAgYmFja2dyb3VuZFN0cm9rZSA9ICd0cmFuc3BhcmVudCc7XHJcbiAgICBiYWNrZ3JvdW5kU3Ryb2tlV2lkdGggPSAwO1xyXG4gICAgYmFja2dyb3VuZFBhZGRpbmcgPSA1O1xyXG4gICAgcGVyY2VudCA9IDA7XHJcbiAgICByYWRpdXMgPSA5MDtcclxuICAgIHNwYWNlID0gNDtcclxuICAgIHRvRml4ZWQgPSAwO1xyXG4gICAgbWF4UGVyY2VudCA9IDEwMDA7XHJcbiAgICByZW5kZXJPbkNsaWNrID0gdHJ1ZTtcclxuICAgIHVuaXRzID0gJyUnO1xyXG4gICAgdW5pdHNGb250U2l6ZSA9ICcxMCc7XHJcbiAgICB1bml0c0ZvbnRXZWlnaHQgPSAnbm9ybWFsJztcclxuICAgIHVuaXRzQ29sb3IgPSAnIzQ0NDQ0NCc7XHJcbiAgICBvdXRlclN0cm9rZUdyYWRpZW50ID0gZmFsc2U7XHJcbiAgICBvdXRlclN0cm9rZVdpZHRoID0gODtcclxuICAgIG91dGVyU3Ryb2tlQ29sb3IgPSAnIzc4QzAwMCc7XHJcbiAgICBvdXRlclN0cm9rZUdyYWRpZW50U3RvcENvbG9yID0gJ3RyYW5zcGFyZW50JztcclxuICAgIG91dGVyU3Ryb2tlTGluZWNhcCA9ICdyb3VuZCc7XHJcbiAgICBpbm5lclN0cm9rZUNvbG9yID0gJyNDN0U1OTYnO1xyXG4gICAgaW5uZXJTdHJva2VXaWR0aCA9IDQ7XHJcbiAgICB0aXRsZUZvcm1hdCA9IHVuZGVmaW5lZDtcclxuICAgIHRpdGxlOiBzdHJpbmcgfCBBcnJheTxTdHJpbmc+ID0gJ2F1dG8nO1xyXG4gICAgdGl0bGVDb2xvciA9ICcjNDQ0NDQ0JztcclxuICAgIHRpdGxlRm9udFNpemUgPSAnMjAnO1xyXG4gICAgdGl0bGVGb250V2VpZ2h0ID0gJ25vcm1hbCc7XHJcbiAgICBzdWJ0aXRsZUZvcm1hdCA9IHVuZGVmaW5lZDtcclxuICAgIHN1YnRpdGxlOiBzdHJpbmcgfCBBcnJheTxTdHJpbmc+ID0gJ3Byb2dyZXNzJztcclxuICAgIHN1YnRpdGxlQ29sb3IgPSAnI0E5QTlBOSc7XHJcbiAgICBzdWJ0aXRsZUZvbnRTaXplID0gJzEwJztcclxuICAgIHN1YnRpdGxlRm9udFdlaWdodCA9ICdub3JtYWwnO1xyXG4gICAgaW1hZ2VTcmMgPSB1bmRlZmluZWQ7XHJcbiAgICBpbWFnZUhlaWdodCA9IHVuZGVmaW5lZDtcclxuICAgIGltYWdlV2lkdGggPSB1bmRlZmluZWQ7XHJcbiAgICBhbmltYXRpb24gPSB0cnVlO1xyXG4gICAgYW5pbWF0ZVRpdGxlID0gdHJ1ZTtcclxuICAgIGFuaW1hdGVTdWJ0aXRsZSA9IGZhbHNlO1xyXG4gICAgYW5pbWF0aW9uRHVyYXRpb24gPSA1MDA7XHJcbiAgICBzaG93VGl0bGUgPSB0cnVlO1xyXG4gICAgc2hvd1N1YnRpdGxlID0gdHJ1ZTtcclxuICAgIHNob3dVbml0cyA9IHRydWU7XHJcbiAgICBzaG93SW1hZ2UgPSBmYWxzZTtcclxuICAgIHNob3dCYWNrZ3JvdW5kID0gdHJ1ZTtcclxuICAgIHNob3dJbm5lclN0cm9rZSA9IHRydWU7XHJcbiAgICBjbG9ja3dpc2UgPSB0cnVlO1xyXG4gICAgcmVzcG9uc2l2ZSA9IGZhbHNlO1xyXG4gICAgc3RhcnRGcm9tWmVybyA9IHRydWU7XHJcbiAgICBzaG93WmVyb091dGVyU3Ryb2tlID0gdHJ1ZTtcclxuICAgIGxhenkgPSBmYWxzZTtcclxufVxyXG5cclxuLyoqIEBkeW5hbWljIFByZXZlbnQgY29tcGlsaW5nIGVycm9yIHdoZW4gdXNpbmcgdHlwZSBgRG9jdW1lbnRgIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzIwMzUxICovXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdjaXJjbGUtcHJvZ3Jlc3MnLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiAqbmdJZj1cInN2Z1wiXHJcbiAgICAgICAgICAgICBbYXR0ci52aWV3Qm94XT1cInN2Zy52aWV3Qm94XCIgcHJlc2VydmVBc3BlY3RSYXRpbz1cInhNaWRZTWlkIG1lZXRcIlxyXG4gICAgICAgICAgICAgW2F0dHIuaGVpZ2h0XT1cInN2Zy5oZWlnaHRcIiBbYXR0ci53aWR0aF09XCJzdmcud2lkdGhcIiAoY2xpY2spPVwiZW1pdENsaWNrRXZlbnQoJGV2ZW50KVwiIFthdHRyLmNsYXNzXT1cIm9wdGlvbnMuY2xhc3NcIj5cclxuICAgICAgICAgICAgPGRlZnM+XHJcbiAgICAgICAgICAgICAgICA8bGluZWFyR3JhZGllbnQgKm5nSWY9XCJvcHRpb25zLm91dGVyU3Ryb2tlR3JhZGllbnRcIiBbYXR0ci5pZF09XCJzdmcub3V0ZXJMaW5lYXJHcmFkaWVudC5pZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzdG9wIG9mZnNldD1cIjUlXCIgW2F0dHIuc3RvcC1jb2xvcl09XCJzdmcub3V0ZXJMaW5lYXJHcmFkaWVudC5jb2xvclN0b3AxXCIgIFthdHRyLnN0b3Atb3BhY2l0eV09XCIxXCIvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzdG9wIG9mZnNldD1cIjk1JVwiIFthdHRyLnN0b3AtY29sb3JdPVwic3ZnLm91dGVyTGluZWFyR3JhZGllbnQuY29sb3JTdG9wMlwiIFthdHRyLnN0b3Atb3BhY2l0eV09XCIxXCIvPlxyXG4gICAgICAgICAgICAgICAgPC9saW5lYXJHcmFkaWVudD5cclxuICAgICAgICAgICAgICAgIDxyYWRpYWxHcmFkaWVudCAqbmdJZj1cIm9wdGlvbnMuYmFja2dyb3VuZEdyYWRpZW50XCIgW2F0dHIuaWRdPVwic3ZnLnJhZGlhbEdyYWRpZW50LmlkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHN0b3Agb2Zmc2V0PVwiNSVcIiBbYXR0ci5zdG9wLWNvbG9yXT1cInN2Zy5yYWRpYWxHcmFkaWVudC5jb2xvclN0b3AxXCIgW2F0dHIuc3RvcC1vcGFjaXR5XT1cIjFcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHN0b3Agb2Zmc2V0PVwiOTUlXCIgW2F0dHIuc3RvcC1jb2xvcl09XCJzdmcucmFkaWFsR3JhZGllbnQuY29sb3JTdG9wMlwiIFthdHRyLnN0b3Atb3BhY2l0eV09XCIxXCIvPlxyXG4gICAgICAgICAgICAgICAgPC9yYWRpYWxHcmFkaWVudD5cclxuICAgICAgICAgICAgPC9kZWZzPlxyXG4gICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwib3B0aW9ucy5zaG93QmFja2dyb3VuZFwiPlxyXG4gICAgICAgICAgICAgICAgPGNpcmNsZSAqbmdJZj1cIiFvcHRpb25zLmJhY2tncm91bmRHcmFkaWVudFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmN4XT1cInN2Zy5iYWNrZ3JvdW5kQ2lyY2xlLmN4XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuY3ldPVwic3ZnLmJhY2tncm91bmRDaXJjbGUuY3lcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5yXT1cInN2Zy5iYWNrZ3JvdW5kQ2lyY2xlLnJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5maWxsXT1cInN2Zy5iYWNrZ3JvdW5kQ2lyY2xlLmZpbGxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5maWxsLW9wYWNpdHldPVwic3ZnLmJhY2tncm91bmRDaXJjbGUuZmlsbE9wYWNpdHlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5zdHJva2VdPVwic3ZnLmJhY2tncm91bmRDaXJjbGUuc3Ryb2tlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuc3Ryb2tlLXdpZHRoXT1cInN2Zy5iYWNrZ3JvdW5kQ2lyY2xlLnN0cm9rZVdpZHRoXCIvPlxyXG4gICAgICAgICAgICAgICAgPGNpcmNsZSAqbmdJZj1cIm9wdGlvbnMuYmFja2dyb3VuZEdyYWRpZW50XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuY3hdPVwic3ZnLmJhY2tncm91bmRDaXJjbGUuY3hcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5jeV09XCJzdmcuYmFja2dyb3VuZENpcmNsZS5jeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLnJdPVwic3ZnLmJhY2tncm91bmRDaXJjbGUuclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIuZmlsbD1cInVybCgje3tzdmcucmFkaWFsR3JhZGllbnQuaWR9fSlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5maWxsLW9wYWNpdHldPVwic3ZnLmJhY2tncm91bmRDaXJjbGUuZmlsbE9wYWNpdHlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5zdHJva2VdPVwic3ZnLmJhY2tncm91bmRDaXJjbGUuc3Ryb2tlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuc3Ryb2tlLXdpZHRoXT1cInN2Zy5iYWNrZ3JvdW5kQ2lyY2xlLnN0cm9rZVdpZHRoXCIvPlxyXG4gICAgICAgICAgICA8L25nLWNvbnRhaW5lcj4gICAgICAgICAgICBcclxuICAgICAgICAgICAgPGNpcmNsZSAqbmdJZj1cIm9wdGlvbnMuc2hvd0lubmVyU3Ryb2tlXCJcclxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5jeF09XCJzdmcuY2lyY2xlLmN4XCJcclxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5jeV09XCJzdmcuY2lyY2xlLmN5XCJcclxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5yXT1cInN2Zy5jaXJjbGUuclwiXHJcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIuZmlsbF09XCJzdmcuY2lyY2xlLmZpbGxcIlxyXG4gICAgICAgICAgICAgICAgICAgIFthdHRyLnN0cm9rZV09XCJzdmcuY2lyY2xlLnN0cm9rZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIuc3Ryb2tlLXdpZHRoXT1cInN2Zy5jaXJjbGUuc3Ryb2tlV2lkdGhcIi8+XHJcbiAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIrb3B0aW9ucy5wZXJjZW50IT09MCB8fCBvcHRpb25zLnNob3daZXJvT3V0ZXJTdHJva2VcIj5cclxuICAgICAgICAgICAgICAgIDxwYXRoICpuZ0lmPVwiIW9wdGlvbnMub3V0ZXJTdHJva2VHcmFkaWVudFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmRdPVwic3ZnLnBhdGguZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLnN0cm9rZV09XCJzdmcucGF0aC5zdHJva2VcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5zdHJva2Utd2lkdGhdPVwic3ZnLnBhdGguc3Ryb2tlV2lkdGhcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5zdHJva2UtbGluZWNhcF09XCJzdmcucGF0aC5zdHJva2VMaW5lY2FwXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuZmlsbF09XCJzdmcucGF0aC5maWxsXCIvPlxyXG4gICAgICAgICAgICAgICAgPHBhdGggKm5nSWY9XCJvcHRpb25zLm91dGVyU3Ryb2tlR3JhZGllbnRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5kXT1cInN2Zy5wYXRoLmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyLnN0cm9rZT1cInVybCgje3tzdmcub3V0ZXJMaW5lYXJHcmFkaWVudC5pZH19KVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLnN0cm9rZS13aWR0aF09XCJzdmcucGF0aC5zdHJva2VXaWR0aFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLnN0cm9rZS1saW5lY2FwXT1cInN2Zy5wYXRoLnN0cm9rZUxpbmVjYXBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5maWxsXT1cInN2Zy5wYXRoLmZpbGxcIi8+XHJcbiAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICAgICAgICA8dGV4dCAqbmdJZj1cIiFvcHRpb25zLnNob3dJbWFnZSAmJiAob3B0aW9ucy5zaG93VGl0bGUgfHwgb3B0aW9ucy5zaG93VW5pdHMgfHwgb3B0aW9ucy5zaG93U3VidGl0bGUpXCJcclxuICAgICAgICAgICAgICAgICAgYWxpZ25tZW50LWJhc2VsaW5lPVwiYmFzZWxpbmVcIlxyXG4gICAgICAgICAgICAgICAgICBbYXR0ci54XT1cInN2Zy5jaXJjbGUuY3hcIlxyXG4gICAgICAgICAgICAgICAgICBbYXR0ci55XT1cInN2Zy5jaXJjbGUuY3lcIlxyXG4gICAgICAgICAgICAgICAgICBbYXR0ci50ZXh0LWFuY2hvcl09XCJzdmcudGl0bGUudGV4dEFuY2hvclwiPlxyXG4gICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIm9wdGlvbnMuc2hvd1RpdGxlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRzcGFuICpuZ0Zvcj1cImxldCB0c3BhbiBvZiBzdmcudGl0bGUudHNwYW5zXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIueF09XCJzdmcudGl0bGUueFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLnldPVwic3ZnLnRpdGxlLnlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5keV09XCJ0c3Bhbi5keVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmZvbnQtc2l6ZV09XCJzdmcudGl0bGUuZm9udFNpemVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5mb250LXdlaWdodF09XCJzdmcudGl0bGUuZm9udFdlaWdodFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmZpbGxdPVwic3ZnLnRpdGxlLmNvbG9yXCI+e3t0c3Bhbi5zcGFufX08L3RzcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgICAgICAgICA8dHNwYW4gKm5nSWY9XCJvcHRpb25zLnNob3dVbml0c1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuZm9udC1zaXplXT1cInN2Zy51bml0cy5mb250U2l6ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuZm9udC13ZWlnaHRdPVwic3ZnLnVuaXRzLmZvbnRXZWlnaHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmZpbGxdPVwic3ZnLnVuaXRzLmNvbG9yXCI+e3tzdmcudW5pdHMudGV4dH19PC90c3Bhbj5cclxuICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJvcHRpb25zLnNob3dTdWJ0aXRsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0c3BhbiAqbmdGb3I9XCJsZXQgdHNwYW4gb2Ygc3ZnLnN1YnRpdGxlLnRzcGFuc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLnhdPVwic3ZnLnN1YnRpdGxlLnhcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci55XT1cInN2Zy5zdWJ0aXRsZS55XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuZHldPVwidHNwYW4uZHlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5mb250LXNpemVdPVwic3ZnLnN1YnRpdGxlLmZvbnRTaXplXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuZm9udC13ZWlnaHRdPVwic3ZnLnN1YnRpdGxlLmZvbnRXZWlnaHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5maWxsXT1cInN2Zy5zdWJ0aXRsZS5jb2xvclwiPnt7dHNwYW4uc3Bhbn19PC90c3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICAgICAgICA8L3RleHQ+XHJcbiAgICAgICAgICAgIDxpbWFnZSAqbmdJZj1cIm9wdGlvbnMuc2hvd0ltYWdlXCIgcHJlc2VydmVBc3BlY3RSYXRpbz1cIm5vbmVcIiBcclxuICAgICAgICAgICAgICAgIFthdHRyLmhlaWdodF09XCJzdmcuaW1hZ2UuaGVpZ2h0XCJcclxuICAgICAgICAgICAgICAgIFthdHRyLndpZHRoXT1cInN2Zy5pbWFnZS53aWR0aFwiXHJcbiAgICAgICAgICAgICAgICBbYXR0ci54bGluazpocmVmXT1cInN2Zy5pbWFnZS5zcmNcIlxyXG4gICAgICAgICAgICAgICAgW2F0dHIueF09XCJzdmcuaW1hZ2UueFwiXHJcbiAgICAgICAgICAgICAgICBbYXR0ci55XT1cInN2Zy5pbWFnZS55XCJcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICA8L3N2Zz5cclxuICAgIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIENpcmNsZVByb2dyZXNzQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gICAgQE91dHB1dCgpIG9uQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIEBJbnB1dCgpIG5hbWU6IHN0cmluZztcclxuICAgIEBJbnB1dCgpIGNsYXNzOiBzdHJpbmc7XHJcbiAgICBASW5wdXQoKSBiYWNrZ3JvdW5kR3JhZGllbnQ6IGJvb2xlYW47XHJcbiAgICBASW5wdXQoKSBiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZztcclxuICAgIEBJbnB1dCgpIGJhY2tncm91bmRHcmFkaWVudFN0b3BDb2xvcjogU3RyaW5nO1xyXG4gICAgQElucHV0KCkgYmFja2dyb3VuZE9wYWNpdHk6IG51bWJlcjtcclxuICAgIEBJbnB1dCgpIGJhY2tncm91bmRTdHJva2U6IHN0cmluZztcclxuICAgIEBJbnB1dCgpIGJhY2tncm91bmRTdHJva2VXaWR0aDogbnVtYmVyO1xyXG4gICAgQElucHV0KCkgYmFja2dyb3VuZFBhZGRpbmc6IG51bWJlcjtcclxuXHJcbiAgICBASW5wdXQoKSByYWRpdXM6IG51bWJlcjtcclxuICAgIEBJbnB1dCgpIHNwYWNlOiBudW1iZXI7XHJcbiAgICBASW5wdXQoKSBwZXJjZW50OiBudW1iZXI7XHJcbiAgICBASW5wdXQoKSB0b0ZpeGVkOiBudW1iZXI7XHJcbiAgICBASW5wdXQoKSBtYXhQZXJjZW50OiBudW1iZXI7XHJcbiAgICBASW5wdXQoKSByZW5kZXJPbkNsaWNrOiBib29sZWFuO1xyXG5cclxuICAgIEBJbnB1dCgpIHVuaXRzOiBzdHJpbmc7XHJcbiAgICBASW5wdXQoKSB1bml0c0ZvbnRTaXplOiBzdHJpbmc7XHJcbiAgICBASW5wdXQoKSB1bml0c0ZvbnRXZWlnaHQ6IHN0cmluZztcclxuICAgIEBJbnB1dCgpIHVuaXRzQ29sb3I6IHN0cmluZztcclxuXHJcbiAgICBASW5wdXQoKSBvdXRlclN0cm9rZUdyYWRpZW50OiBib29sZWFuO1xyXG4gICAgQElucHV0KCkgb3V0ZXJTdHJva2VXaWR0aDogbnVtYmVyO1xyXG4gICAgQElucHV0KCkgb3V0ZXJTdHJva2VDb2xvcjogc3RyaW5nO1xyXG4gICAgQElucHV0KCkgb3V0ZXJTdHJva2VHcmFkaWVudFN0b3BDb2xvcjogU3RyaW5nO1xyXG4gICAgQElucHV0KCkgb3V0ZXJTdHJva2VMaW5lY2FwOiBzdHJpbmc7XHJcblxyXG4gICAgQElucHV0KCkgaW5uZXJTdHJva2VDb2xvcjogc3RyaW5nO1xyXG4gICAgQElucHV0KCkgaW5uZXJTdHJva2VXaWR0aDogc3RyaW5nIHwgbnVtYmVyO1xyXG5cclxuICAgIEBJbnB1dCgpIHRpdGxlRm9ybWF0OiBGdW5jdGlvbjtcclxuICAgIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmcgfCBBcnJheTxTdHJpbmc+O1xyXG4gICAgQElucHV0KCkgdGl0bGVDb2xvcjogc3RyaW5nO1xyXG4gICAgQElucHV0KCkgdGl0bGVGb250U2l6ZTogc3RyaW5nO1xyXG4gICAgQElucHV0KCkgdGl0bGVGb250V2VpZ2h0OiBzdHJpbmc7XHJcblxyXG4gICAgQElucHV0KCkgc3VidGl0bGVGb3JtYXQ6IEZ1bmN0aW9uO1xyXG4gICAgQElucHV0KCkgc3VidGl0bGU6IHN0cmluZyB8IHN0cmluZ1tdO1xyXG4gICAgQElucHV0KCkgc3VidGl0bGVDb2xvcjogc3RyaW5nO1xyXG4gICAgQElucHV0KCkgc3VidGl0bGVGb250U2l6ZTogc3RyaW5nO1xyXG4gICAgQElucHV0KCkgc3VidGl0bGVGb250V2VpZ2h0OiBzdHJpbmc7XHJcblxyXG4gICAgQElucHV0KCkgaW1hZ2VTcmM6IHN0cmluZztcclxuICAgIEBJbnB1dCgpIGltYWdlSGVpZ2h0OiBudW1iZXI7XHJcbiAgICBASW5wdXQoKSBpbWFnZVdpZHRoOiBudW1iZXI7XHJcblxyXG4gICAgQElucHV0KCkgYW5pbWF0aW9uOiBib29sZWFuO1xyXG4gICAgQElucHV0KCkgYW5pbWF0ZVRpdGxlOiBib29sZWFuO1xyXG4gICAgQElucHV0KCkgYW5pbWF0ZVN1YnRpdGxlOiBib29sZWFuO1xyXG4gICAgQElucHV0KCkgYW5pbWF0aW9uRHVyYXRpb246IG51bWJlcjtcclxuXHJcbiAgICBASW5wdXQoKSBzaG93VGl0bGU6IGJvb2xlYW47XHJcbiAgICBASW5wdXQoKSBzaG93U3VidGl0bGU6IGJvb2xlYW47XHJcbiAgICBASW5wdXQoKSBzaG93VW5pdHM6IGJvb2xlYW47XHJcbiAgICBASW5wdXQoKSBzaG93SW1hZ2U6IGJvb2xlYW47XHJcbiAgICBASW5wdXQoKSBzaG93QmFja2dyb3VuZDogYm9vbGVhbjtcclxuICAgIEBJbnB1dCgpIHNob3dJbm5lclN0cm9rZTogYm9vbGVhbjtcclxuICAgIEBJbnB1dCgpIGNsb2Nrd2lzZTogYm9vbGVhbjtcclxuICAgIEBJbnB1dCgpIHJlc3BvbnNpdmU6IGJvb2xlYW47XHJcbiAgICBASW5wdXQoKSBzdGFydEZyb21aZXJvOiBib29sZWFuO1xyXG4gICAgQElucHV0KCkgc2hvd1plcm9PdXRlclN0cm9rZTogYm9vbGVhbjtcclxuICAgIFxyXG4gICAgQElucHV0KCkgbGF6eTogYm9vbGVhbjtcclxuXHJcbiAgICBASW5wdXQoJ29wdGlvbnMnKSB0ZW1wbGF0ZU9wdGlvbnM6IENpcmNsZVByb2dyZXNzT3B0aW9ucztcclxuXHJcbiAgICAvLyA8c3ZnPiBvZiBjb21wb25lbnRcclxuICAgIHN2Z0VsZW1lbnQ6IEhUTUxFbGVtZW50ID0gbnVsbDtcclxuICAgIC8vIHdoZXRoZXIgPHN2Zz4gaXMgaW4gdmlld3BvcnRcclxuICAgIGlzSW5WaWV3cG9ydDogQm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgLy8gZXZlbnQgZm9yIG5vdGlmeWluZyB2aWV3cG9ydCBjaGFuZ2UgY2F1c2VkIGJ5IHNjcm9sbGluZyBvciByZXNpemluZ1xyXG4gICAgb25WaWV3cG9ydENoYW5nZWQ6IEV2ZW50RW1pdHRlcjx7b2xkVmFsdWU6IEJvb2xlYW4sIG5ld1ZhbHVlOiBCb29sZWFufT4gPSBuZXcgRXZlbnRFbWl0dGVyO1xyXG4gICAgd2luZG93OiBXaW5kb3c7XHJcbiAgICBfdmlld3BvcnRDaGFuZ2VkU3Vic2NyaWJlcjogU3Vic2NyaXB0aW9uID0gbnVsbDtcclxuXHJcbiAgICBzdmc6IGFueTtcclxuXHJcbiAgICBvcHRpb25zOiBDaXJjbGVQcm9ncmVzc09wdGlvbnMgPSBuZXcgQ2lyY2xlUHJvZ3Jlc3NPcHRpb25zKCk7XHJcbiAgICBkZWZhdWx0T3B0aW9uczogQ2lyY2xlUHJvZ3Jlc3NPcHRpb25zID0gbmV3IENpcmNsZVByb2dyZXNzT3B0aW9ucygpO1xyXG4gICAgX2xhc3RQZXJjZW50OiBudW1iZXIgPSAwO1xyXG4gICAgX2dyYWRpZW50VVVJRDogc3RyaW5nID0gbnVsbDtcclxuICAgIHJlbmRlciA9ICgpID0+IHtcclxuXHJcbiAgICAgICAgdGhpcy5hcHBseU9wdGlvbnMoKTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5vcHRpb25zLmxhenkpe1xyXG4gICAgICAgICAgICAvLyBEcmF3IHN2ZyBpZiBpdCBkb2Vzbid0IGV4aXN0XHJcbiAgICAgICAgICAgIHRoaXMuc3ZnRWxlbWVudCA9PT0gbnVsbCAmJiB0aGlzLmRyYXcodGhpcy5fbGFzdFBlcmNlbnQpO1xyXG4gICAgICAgICAgICAvLyBEcmF3IGl0IG9ubHkgd2hlbiBpdCdzIGluIHRoZSB2aWV3cG9ydFxyXG4gICAgICAgICAgICBpZih0aGlzLmlzSW5WaWV3cG9ydCl7XHJcbiAgICAgICAgICAgICAgICAvLyBEcmF3IGl0IGF0IHRoZSBsYXRlc3QgcG9zaXRpb24gd2hlbiBJIGFtIGluLlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb24gJiYgdGhpcy5vcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZSh0aGlzLl9sYXN0UGVyY2VudCwgdGhpcy5vcHRpb25zLnBlcmNlbnQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXcodGhpcy5vcHRpb25zLnBlcmNlbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdFBlcmNlbnQgPSB0aGlzLm9wdGlvbnMucGVyY2VudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0aW9uICYmIHRoaXMub3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbiA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZSh0aGlzLl9sYXN0UGVyY2VudCwgdGhpcy5vcHRpb25zLnBlcmNlbnQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3KHRoaXMub3B0aW9ucy5wZXJjZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9sYXN0UGVyY2VudCA9IHRoaXMub3B0aW9ucy5wZXJjZW50O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBwb2xhclRvQ2FydGVzaWFuID0gKGNlbnRlclg6IG51bWJlciwgY2VudGVyWTogbnVtYmVyLCByYWRpdXM6IG51bWJlciwgYW5nbGVJbkRlZ3JlZXM6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIGxldCBhbmdsZUluUmFkaXVzID0gYW5nbGVJbkRlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwO1xyXG4gICAgICAgIGxldCB4ID0gY2VudGVyWCArIE1hdGguc2luKGFuZ2xlSW5SYWRpdXMpICogcmFkaXVzO1xyXG4gICAgICAgIGxldCB5ID0gY2VudGVyWSAtIE1hdGguY29zKGFuZ2xlSW5SYWRpdXMpICogcmFkaXVzO1xyXG4gICAgICAgIHJldHVybiB7eDogeCwgeTogeX07XHJcbiAgICB9O1xyXG4gICAgZHJhdyA9IChwZXJjZW50OiBudW1iZXIpID0+IHtcclxuICAgICAgICAvLyBtYWtlIHBlcmNlbnQgcmVhc29uYWJsZVxyXG4gICAgICAgIHBlcmNlbnQgPSAocGVyY2VudCA9PT0gdW5kZWZpbmVkKSA/IHRoaXMub3B0aW9ucy5wZXJjZW50IDogTWF0aC5hYnMocGVyY2VudCk7XHJcbiAgICAgICAgLy8gY2lyY2xlIHBlcmNlbnQgc2hvdWxkbid0IGJlIGdyZWF0ZXIgdGhhbiAxMDAlLlxyXG4gICAgICAgIGxldCBjaXJjbGVQZXJjZW50ID0gKHBlcmNlbnQgPiAxMDApID8gMTAwIDogcGVyY2VudDtcclxuICAgICAgICAvLyBkZXRlcm1pbmUgYm94IHNpemVcclxuICAgICAgICBsZXQgYm94U2l6ZSA9IHRoaXMub3B0aW9ucy5yYWRpdXMgKiAyICsgdGhpcy5vcHRpb25zLm91dGVyU3Ryb2tlV2lkdGggKiAyO1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd0JhY2tncm91bmQpIHtcclxuICAgICAgICAgICAgYm94U2l6ZSArPSAodGhpcy5vcHRpb25zLmJhY2tncm91bmRTdHJva2VXaWR0aCAqIDIgKyB0aGlzLm1heCgwLCB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZFBhZGRpbmcgKiAyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRoZSBjZW50cmUgb2YgdGhlIGNpcmNsZVxyXG4gICAgICAgIGxldCBjZW50cmUgPSB7eDogYm94U2l6ZSAvIDIsIHk6IGJveFNpemUgLyAyfTtcclxuICAgICAgICAvLyB0aGUgc3RhcnQgcG9pbnQgb2YgdGhlIGFyY1xyXG4gICAgICAgIGxldCBzdGFydFBvaW50ID0ge3g6IGNlbnRyZS54LCB5OiBjZW50cmUueSAtIHRoaXMub3B0aW9ucy5yYWRpdXN9O1xyXG4gICAgICAgIC8vIGdldCB0aGUgZW5kIHBvaW50IG9mIHRoZSBhcmNcclxuICAgICAgICBsZXQgZW5kUG9pbnQgPSB0aGlzLnBvbGFyVG9DYXJ0ZXNpYW4oY2VudHJlLngsIGNlbnRyZS55LCB0aGlzLm9wdGlvbnMucmFkaXVzLCAzNjAgKiAodGhpcy5vcHRpb25zLmNsb2Nrd2lzZSA/XHJcbiAgICAgICAgICAgIGNpcmNsZVBlcmNlbnQgOlxyXG4gICAgICAgICAgICAoMTAwIC0gY2lyY2xlUGVyY2VudCkpIC8gMTAwKTsgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcbiAgICAgICAgLy8gV2UnbGwgZ2V0IGFuIGVuZCBwb2ludCB3aXRoIHRoZSBzYW1lIFt4LCB5XSBhcyB0aGUgc3RhcnQgcG9pbnQgd2hlbiBwZXJjZW50IGlzIDEwMCUsIHNvIG1vdmUgeCBhIGxpdHRsZSBiaXQuXHJcbiAgICAgICAgaWYgKGNpcmNsZVBlcmNlbnQgPT09IDEwMCkge1xyXG4gICAgICAgICAgICBlbmRQb2ludC54ID0gZW5kUG9pbnQueCArICh0aGlzLm9wdGlvbnMuY2xvY2t3aXNlID8gLTAuMDEgOiArMC4wMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGxhcmdlQXJjRmxhZyBhbmQgc3dlZXBGbGFnXHJcbiAgICAgICAgbGV0IGxhcmdlQXJjRmxhZzogYW55LCBzd2VlcEZsYWc6IGFueTtcclxuICAgICAgICBpZiAoY2lyY2xlUGVyY2VudCA+IDUwKSB7XHJcbiAgICAgICAgICAgIFtsYXJnZUFyY0ZsYWcsIHN3ZWVwRmxhZ10gPSB0aGlzLm9wdGlvbnMuY2xvY2t3aXNlID8gWzEsIDFdIDogWzEsIDBdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIFtsYXJnZUFyY0ZsYWcsIHN3ZWVwRmxhZ10gPSB0aGlzLm9wdGlvbnMuY2xvY2t3aXNlID8gWzAsIDFdIDogWzAsIDBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBwZXJjZW50IG1heSBub3QgZXF1YWwgdGhlIGFjdHVhbCBwZXJjZW50XHJcbiAgICAgICAgbGV0IHRpdGxlUGVyY2VudCA9IHRoaXMub3B0aW9ucy5hbmltYXRlVGl0bGUgPyBwZXJjZW50IDogdGhpcy5vcHRpb25zLnBlcmNlbnQ7XHJcbiAgICAgICAgbGV0IHRpdGxlVGV4dFBlcmNlbnQgPSB0aXRsZVBlcmNlbnQgPiB0aGlzLm9wdGlvbnMubWF4UGVyY2VudCA/XHJcbiAgICAgICAgICAgIGAke3RoaXMub3B0aW9ucy5tYXhQZXJjZW50LnRvRml4ZWQodGhpcy5vcHRpb25zLnRvRml4ZWQpfStgIDogdGl0bGVQZXJjZW50LnRvRml4ZWQodGhpcy5vcHRpb25zLnRvRml4ZWQpO1xyXG4gICAgICAgIGxldCBzdWJ0aXRsZVBlcmNlbnQgPSB0aGlzLm9wdGlvbnMuYW5pbWF0ZVN1YnRpdGxlID8gcGVyY2VudCA6IHRoaXMub3B0aW9ucy5wZXJjZW50O1xyXG4gICAgICAgIC8vIGdldCB0aXRsZSBvYmplY3RcclxuICAgICAgICBsZXQgdGl0bGUgPSB7XHJcbiAgICAgICAgICAgIHg6IGNlbnRyZS54LFxyXG4gICAgICAgICAgICB5OiBjZW50cmUueSxcclxuICAgICAgICAgICAgdGV4dEFuY2hvcjogJ21pZGRsZScsXHJcbiAgICAgICAgICAgIGNvbG9yOiB0aGlzLm9wdGlvbnMudGl0bGVDb2xvcixcclxuICAgICAgICAgICAgZm9udFNpemU6IHRoaXMub3B0aW9ucy50aXRsZUZvbnRTaXplLFxyXG4gICAgICAgICAgICBmb250V2VpZ2h0OiB0aGlzLm9wdGlvbnMudGl0bGVGb250V2VpZ2h0LFxyXG4gICAgICAgICAgICB0ZXh0czogW10sXHJcbiAgICAgICAgICAgIHRzcGFuczogW11cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIGZyb20gdjAuOS45LCBib3RoIHRpdGxlIGFuZCB0aXRsZUZvcm1hdCguLi4pIG1heSBiZSBhbiBhcnJheSBvZiBzdHJpbmcuXHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50aXRsZUZvcm1hdCAhPT0gdW5kZWZpbmVkICYmIHRoaXMub3B0aW9ucy50aXRsZUZvcm1hdC5jb25zdHJ1Y3Rvci5uYW1lID09PSAnRnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGxldCBmb3JtYXR0ZWQgPSB0aGlzLm9wdGlvbnMudGl0bGVGb3JtYXQodGl0bGVQZXJjZW50KTtcclxuICAgICAgICAgICAgaWYgKGZvcm1hdHRlZCBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZS50ZXh0cyA9IFsuLi5mb3JtYXR0ZWRdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGl0bGUudGV4dHMucHVzaChmb3JtYXR0ZWQudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRpdGxlID09PSAnYXV0bycpIHtcclxuICAgICAgICAgICAgICAgIHRpdGxlLnRleHRzLnB1c2godGl0bGVUZXh0UGVyY2VudCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRpdGxlIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZS50ZXh0cyA9IFsuLi50aGlzLm9wdGlvbnMudGl0bGVdXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlLnRleHRzLnB1c2godGhpcy5vcHRpb25zLnRpdGxlLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGdldCBzdWJ0aXRsZSBvYmplY3RcclxuICAgICAgICBsZXQgc3VidGl0bGUgPSB7XHJcbiAgICAgICAgICAgIHg6IGNlbnRyZS54LFxyXG4gICAgICAgICAgICB5OiBjZW50cmUueSxcclxuICAgICAgICAgICAgdGV4dEFuY2hvcjogJ21pZGRsZScsXHJcbiAgICAgICAgICAgIGNvbG9yOiB0aGlzLm9wdGlvbnMuc3VidGl0bGVDb2xvcixcclxuICAgICAgICAgICAgZm9udFNpemU6IHRoaXMub3B0aW9ucy5zdWJ0aXRsZUZvbnRTaXplLFxyXG4gICAgICAgICAgICBmb250V2VpZ2h0OiB0aGlzLm9wdGlvbnMuc3VidGl0bGVGb250V2VpZ2h0LFxyXG4gICAgICAgICAgICB0ZXh0czogW10sXHJcbiAgICAgICAgICAgIHRzcGFuczogW11cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZnJvbSB2MC45LjksIGJvdGggc3VidGl0bGUgYW5kIHN1YnRpdGxlRm9ybWF0KC4uLikgbWF5IGJlIGFuIGFycmF5IG9mIHN0cmluZy5cclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnN1YnRpdGxlRm9ybWF0ICE9PSB1bmRlZmluZWQgJiYgdGhpcy5vcHRpb25zLnN1YnRpdGxlRm9ybWF0LmNvbnN0cnVjdG9yLm5hbWUgPT09ICdGdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgbGV0IGZvcm1hdHRlZCA9IHRoaXMub3B0aW9ucy5zdWJ0aXRsZUZvcm1hdChzdWJ0aXRsZVBlcmNlbnQpO1xyXG4gICAgICAgICAgICBpZiAoZm9ybWF0dGVkIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIHN1YnRpdGxlLnRleHRzID0gWy4uLmZvcm1hdHRlZF07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdWJ0aXRsZS50ZXh0cy5wdXNoKGZvcm1hdHRlZC50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3VidGl0bGUgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgc3VidGl0bGUudGV4dHMgPSBbLi4udGhpcy5vcHRpb25zLnN1YnRpdGxlXVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3VidGl0bGUudGV4dHMucHVzaCh0aGlzLm9wdGlvbnMuc3VidGl0bGUudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZ2V0IHVuaXRzIG9iamVjdFxyXG4gICAgICAgIGxldCB1bml0cyA9IHtcclxuICAgICAgICAgICAgdGV4dDogYCR7dGhpcy5vcHRpb25zLnVuaXRzfWAsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiB0aGlzLm9wdGlvbnMudW5pdHNGb250U2l6ZSxcclxuICAgICAgICAgICAgZm9udFdlaWdodDogdGhpcy5vcHRpb25zLnVuaXRzRm9udFdlaWdodCxcclxuICAgICAgICAgICAgY29sb3I6IHRoaXMub3B0aW9ucy51bml0c0NvbG9yXHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBnZXQgdG90YWwgY291bnQgb2YgdGV4dCBsaW5lcyB0byBiZSBzaG93blxyXG4gICAgICAgIGxldCByb3dDb3VudCA9IDAsIHJvd051bSA9IDE7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnNob3dUaXRsZSAmJiAocm93Q291bnQgKz0gdGl0bGUudGV4dHMubGVuZ3RoKTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMuc2hvd1N1YnRpdGxlICYmIChyb3dDb3VudCArPSBzdWJ0aXRsZS50ZXh0cy5sZW5ndGgpO1xyXG4gICAgICAgIC8vIGNhbGMgZHkgZm9yIGVhY2ggdHNwYW4gZm9yIHRpdGxlXHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93VGl0bGUpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgc3BhbiBvZiB0aXRsZS50ZXh0cykge1xyXG4gICAgICAgICAgICAgICAgdGl0bGUudHNwYW5zLnB1c2goe3NwYW46IHNwYW4sIGR5OiB0aGlzLmdldFJlbGF0aXZlWShyb3dOdW0sIHJvd0NvdW50KX0pO1xyXG4gICAgICAgICAgICAgICAgcm93TnVtKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY2FsYyBkeSBmb3IgZWFjaCB0c3BhbiBmb3Igc3VidGl0bGVcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dTdWJ0aXRsZSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBzcGFuIG9mIHN1YnRpdGxlLnRleHRzKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJ0aXRsZS50c3BhbnMucHVzaCh7c3Bhbjogc3BhbiwgZHk6IHRoaXMuZ2V0UmVsYXRpdmVZKHJvd051bSwgcm93Q291bnQpfSlcclxuICAgICAgICAgICAgICAgIHJvd051bSsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNyZWF0ZSBJRCBmb3IgZ3JhZGllbnQgZWxlbWVudFxyXG4gICAgICAgIGlmIChudWxsID09PSB0aGlzLl9ncmFkaWVudFVVSUQpe1xyXG4gICAgICAgICAgICB0aGlzLl9ncmFkaWVudFVVSUQgPSB0aGlzLnV1aWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQnJpbmcgaXQgYWxsIHRvZ2V0aGVyXHJcbiAgICAgICAgdGhpcy5zdmcgPSB7XHJcbiAgICAgICAgICAgIHZpZXdCb3g6IGAwIDAgJHtib3hTaXplfSAke2JveFNpemV9YCxcclxuICAgICAgICAgICAgLy8gU2V0IGJvdGggd2lkdGggYW5kIGhlaWdodCB0byAnMTAwJScgaWYgaXQncyByZXNwb25zaXZlXHJcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZSA/ICcxMDAlJyA6IGJveFNpemUsXHJcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5vcHRpb25zLnJlc3BvbnNpdmUgPyAnMTAwJScgOiBib3hTaXplLFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ2lyY2xlOiB7XHJcbiAgICAgICAgICAgICAgICBjeDogY2VudHJlLngsXHJcbiAgICAgICAgICAgICAgICBjeTogY2VudHJlLnksXHJcbiAgICAgICAgICAgICAgICByOiB0aGlzLm9wdGlvbnMucmFkaXVzICsgdGhpcy5vcHRpb25zLm91dGVyU3Ryb2tlV2lkdGggLyAyICsgdGhpcy5vcHRpb25zLmJhY2tncm91bmRQYWRkaW5nLFxyXG4gICAgICAgICAgICAgICAgZmlsbDogdGhpcy5vcHRpb25zLmJhY2tncm91bmRDb2xvcixcclxuICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZE9wYWNpdHksXHJcbiAgICAgICAgICAgICAgICBzdHJva2U6IHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kU3Ryb2tlLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kU3Ryb2tlV2lkdGgsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBhdGg6IHtcclxuICAgICAgICAgICAgICAgIC8vIEEgcnggcnkgeC1heGlzLXJvdGF0aW9uIGxhcmdlLWFyYy1mbGFnIHN3ZWVwLWZsYWcgeCB5IChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9TVkcvVHV0b3JpYWwvUGF0aHMjQXJjcylcclxuICAgICAgICAgICAgICAgIGQ6IGBNICR7c3RhcnRQb2ludC54fSAke3N0YXJ0UG9pbnQueX1cclxuICAgICAgICBBICR7dGhpcy5vcHRpb25zLnJhZGl1c30gJHt0aGlzLm9wdGlvbnMucmFkaXVzfSAwICR7bGFyZ2VBcmNGbGFnfSAke3N3ZWVwRmxhZ30gJHtlbmRQb2ludC54fSAke2VuZFBvaW50Lnl9YCxcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogdGhpcy5vcHRpb25zLm91dGVyU3Ryb2tlQ29sb3IsXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogdGhpcy5vcHRpb25zLm91dGVyU3Ryb2tlV2lkdGgsXHJcbiAgICAgICAgICAgICAgICBzdHJva2VMaW5lY2FwOiB0aGlzLm9wdGlvbnMub3V0ZXJTdHJva2VMaW5lY2FwLFxyXG4gICAgICAgICAgICAgICAgZmlsbDogJ25vbmUnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNpcmNsZToge1xyXG4gICAgICAgICAgICAgICAgY3g6IGNlbnRyZS54LFxyXG4gICAgICAgICAgICAgICAgY3k6IGNlbnRyZS55LFxyXG4gICAgICAgICAgICAgICAgcjogdGhpcy5vcHRpb25zLnJhZGl1cyAtIHRoaXMub3B0aW9ucy5zcGFjZSAtIHRoaXMub3B0aW9ucy5vdXRlclN0cm9rZVdpZHRoIC8gMiAtIHRoaXMub3B0aW9ucy5pbm5lclN0cm9rZVdpZHRoIC8gMixcclxuICAgICAgICAgICAgICAgIGZpbGw6ICdub25lJyxcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogdGhpcy5vcHRpb25zLmlubmVyU3Ryb2tlQ29sb3IsXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogdGhpcy5vcHRpb25zLmlubmVyU3Ryb2tlV2lkdGgsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcclxuICAgICAgICAgICAgdW5pdHM6IHVuaXRzLFxyXG4gICAgICAgICAgICBzdWJ0aXRsZTogc3VidGl0bGUsXHJcbiAgICAgICAgICAgIGltYWdlOiB7XHJcbiAgICAgICAgICAgICAgICB4OiBjZW50cmUueCAtIHRoaXMub3B0aW9ucy5pbWFnZVdpZHRoIC8gMixcclxuICAgICAgICAgICAgICAgIHk6IGNlbnRyZS55IC0gdGhpcy5vcHRpb25zLmltYWdlSGVpZ2h0IC8gMixcclxuICAgICAgICAgICAgICAgIHNyYzogdGhpcy5vcHRpb25zLmltYWdlU3JjLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMub3B0aW9ucy5pbWFnZVdpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLm9wdGlvbnMuaW1hZ2VIZWlnaHQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG91dGVyTGluZWFyR3JhZGllbnQ6IHtcclxuICAgICAgICAgICAgICAgIGlkOiAnb3V0ZXItbGluZWFyLScgKyB0aGlzLl9ncmFkaWVudFVVSUQsXHJcbiAgICAgICAgICAgICAgICBjb2xvclN0b3AxOiB0aGlzLm9wdGlvbnMub3V0ZXJTdHJva2VDb2xvcixcclxuICAgICAgICAgICAgICAgIGNvbG9yU3RvcDI6IHRoaXMub3B0aW9ucy5vdXRlclN0cm9rZUdyYWRpZW50U3RvcENvbG9yID09PSAndHJhbnNwYXJlbnQnID8gJyNGRkYnIDogdGhpcy5vcHRpb25zLm91dGVyU3Ryb2tlR3JhZGllbnRTdG9wQ29sb3IsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJhZGlhbEdyYWRpZW50OiB7XHJcbiAgICAgICAgICAgICAgICBpZDogJ3JhZGlhbC0nICsgdGhpcy5fZ3JhZGllbnRVVUlELFxyXG4gICAgICAgICAgICAgICAgY29sb3JTdG9wMTogdGhpcy5vcHRpb25zLmJhY2tncm91bmRDb2xvcixcclxuICAgICAgICAgICAgICAgIGNvbG9yU3RvcDI6IHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kR3JhZGllbnRTdG9wQ29sb3IgPT09ICd0cmFuc3BhcmVudCcgPyAnI0ZGRicgOiB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZEdyYWRpZW50U3RvcENvbG9yLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBnZXRBbmltYXRpb25QYXJhbWV0ZXJzID0gKHByZXZpb3VzUGVyY2VudDogbnVtYmVyLCBjdXJyZW50UGVyY2VudDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgY29uc3QgTUlOX0lOVEVSVkFMID0gMTA7XHJcbiAgICAgICAgbGV0IHRpbWVzOiBudW1iZXIsIHN0ZXA6IG51bWJlciwgaW50ZXJ2YWw6IG51bWJlcjtcclxuICAgICAgICBsZXQgZnJvbVBlcmNlbnQgPSB0aGlzLm9wdGlvbnMuc3RhcnRGcm9tWmVybyA/IDAgOiAocHJldmlvdXNQZXJjZW50IDwgMCA/IDAgOiBwcmV2aW91c1BlcmNlbnQpO1xyXG4gICAgICAgIGxldCB0b1BlcmNlbnQgPSBjdXJyZW50UGVyY2VudCA8IDAgPyAwIDogdGhpcy5taW4oY3VycmVudFBlcmNlbnQsIHRoaXMub3B0aW9ucy5tYXhQZXJjZW50KTtcclxuICAgICAgICBsZXQgZGVsdGEgPSBNYXRoLmFicyhNYXRoLnJvdW5kKHRvUGVyY2VudCAtIGZyb21QZXJjZW50KSk7XHJcblxyXG4gICAgICAgIGlmIChkZWx0YSA+PSAxMDApIHtcclxuICAgICAgICAgICAgLy8gd2Ugd2lsbCBmaW5pc2ggYW5pbWF0aW9uIGluIDEwMCB0aW1lc1xyXG4gICAgICAgICAgICB0aW1lcyA9IDEwMDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYW5pbWF0ZVRpdGxlICYmICF0aGlzLm9wdGlvbnMuYW5pbWF0ZVN1YnRpdGxlKSB7XHJcbiAgICAgICAgICAgICAgICBzdGVwID0gMTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHNob3cgdGl0bGUgb3Igc3VidGl0bGUgYW5pbWF0aW9uIGV2ZW4gaWYgdGhlIGFyYyBpcyBmdWxsLCB3ZSBhbHNvIG5lZWQgdG8gZmluaXNoIGl0IGluIDEwMCB0aW1lcy5cclxuICAgICAgICAgICAgICAgIHN0ZXAgPSBNYXRoLnJvdW5kKGRlbHRhIC8gdGltZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gd2Ugd2lsbCBmaW5pc2ggaW4gYXMgbWFueSB0aW1lcyBhcyB0aGUgbnVtYmVyIG9mIHBlcmNlbnQuXHJcbiAgICAgICAgICAgIHRpbWVzID0gZGVsdGE7XHJcbiAgICAgICAgICAgIHN0ZXAgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBHZXQgdGhlIGludGVydmFsIG9mIHRpbWVyXHJcbiAgICAgICAgaW50ZXJ2YWwgPSBNYXRoLnJvdW5kKHRoaXMub3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbiAvIHRpbWVzKTtcclxuICAgICAgICAvLyBSZWFkanVzdCBhbGwgdmFsdWVzIGlmIHRoZSBpbnRlcnZhbCBvZiB0aW1lciBpcyBleHRyZW1lbHkgc21hbGwuXHJcbiAgICAgICAgaWYgKGludGVydmFsIDwgTUlOX0lOVEVSVkFMKSB7XHJcbiAgICAgICAgICAgIGludGVydmFsID0gTUlOX0lOVEVSVkFMO1xyXG4gICAgICAgICAgICB0aW1lcyA9IHRoaXMub3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbiAvIGludGVydmFsO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5hbmltYXRlVGl0bGUgJiYgIXRoaXMub3B0aW9ucy5hbmltYXRlU3VidGl0bGUgJiYgZGVsdGEgPiAxMDApIHtcclxuICAgICAgICAgICAgICAgIHN0ZXAgPSBNYXRoLnJvdW5kKDEwMCAvIHRpbWVzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0ZXAgPSBNYXRoLnJvdW5kKGRlbHRhIC8gdGltZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHN0ZXAgbXVzdCBiZSBncmVhdGVyIHRoYW4gMC5cclxuICAgICAgICBpZiAoc3RlcCA8IDEpIHtcclxuICAgICAgICAgICAgc3RlcCA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7dGltZXM6IHRpbWVzLCBzdGVwOiBzdGVwLCBpbnRlcnZhbDogaW50ZXJ2YWx9O1xyXG4gICAgfTtcclxuICAgIGFuaW1hdGUgPSAocHJldmlvdXNQZXJjZW50OiBudW1iZXIsIGN1cnJlbnRQZXJjZW50OiBudW1iZXIpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5fdGltZXJTdWJzY3JpcHRpb24gJiYgIXRoaXMuX3RpbWVyU3Vic2NyaXB0aW9uLmNsb3NlZCkge1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgZnJvbVBlcmNlbnQgPSB0aGlzLm9wdGlvbnMuc3RhcnRGcm9tWmVybyA/IDAgOiBwcmV2aW91c1BlcmNlbnQ7XHJcbiAgICAgICAgbGV0IHRvUGVyY2VudCA9IGN1cnJlbnRQZXJjZW50O1xyXG4gICAgICAgIGxldCB7c3RlcDogc3RlcCwgaW50ZXJ2YWw6IGludGVydmFsfSA9IHRoaXMuZ2V0QW5pbWF0aW9uUGFyYW1ldGVycyhmcm9tUGVyY2VudCwgdG9QZXJjZW50KTtcclxuICAgICAgICBsZXQgY291bnQgPSBmcm9tUGVyY2VudDtcclxuICAgICAgICBpZihmcm9tUGVyY2VudCA8IHRvUGVyY2VudCl7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVyU3Vic2NyaXB0aW9uID0gdGltZXIoMCwgaW50ZXJ2YWwpLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb3VudCArPSBzdGVwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvdW50IDw9IHRvUGVyY2VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmFuaW1hdGVUaXRsZSAmJiAhdGhpcy5vcHRpb25zLmFuaW1hdGVTdWJ0aXRsZSAmJiBjb3VudCA+PSAxMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3KHRvUGVyY2VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RpbWVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3KGNvdW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhdyh0b1BlcmNlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RpbWVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lclN1YnNjcmlwdGlvbiA9IHRpbWVyKDAsIGludGVydmFsKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY291bnQgLT0gc3RlcDtcclxuICAgICAgICAgICAgICAgIGlmIChjb3VudCA+PSB0b1BlcmNlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5hbmltYXRlVGl0bGUgJiYgIXRoaXMub3B0aW9ucy5hbmltYXRlU3VidGl0bGUgJiYgdG9QZXJjZW50ID49IDEwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXcodG9QZXJjZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGltZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXcoY291bnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3KHRvUGVyY2VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGltZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGVtaXRDbGlja0V2ZW50ID0gKGV2ZW50OiBhbnkpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlbmRlck9uQ2xpY2spIHtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRlKDAsIHRoaXMub3B0aW9ucy5wZXJjZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vbkNsaWNrLmVtaXQoZXZlbnQpO1xyXG4gICAgfTtcclxuICAgIHByaXZhdGUgX3RpbWVyU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcbiAgICBwcml2YXRlIGFwcGx5T3B0aW9ucyA9ICgpID0+IHtcclxuICAgICAgICAvLyB0aGUgb3B0aW9ucyBvZiA8Y2lyY2xlLXByb2dyZXNzPiBtYXkgY2hhbmdlIGFscmVhZHlcclxuICAgICAgICBmb3IgKGxldCBuYW1lIG9mIE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucykpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgdGhpc1tuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNbbmFtZV0gPSB0aGlzW25hbWVdO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudGVtcGxhdGVPcHRpb25zICYmIHRoaXMudGVtcGxhdGVPcHRpb25zW25hbWVdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc1tuYW1lXSA9IHRoaXMudGVtcGxhdGVPcHRpb25zW25hbWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIG1ha2Ugc3VyZSBrZXkgb3B0aW9ucyB2YWxpZFxyXG4gICAgICAgIHRoaXMub3B0aW9ucy5yYWRpdXMgPSBNYXRoLmFicygrdGhpcy5vcHRpb25zLnJhZGl1cyk7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnNwYWNlID0gK3RoaXMub3B0aW9ucy5zcGFjZTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMucGVyY2VudCA9ICt0aGlzLm9wdGlvbnMucGVyY2VudCA+IDAgPyArdGhpcy5vcHRpb25zLnBlcmNlbnQgOiAwO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucy5tYXhQZXJjZW50ID0gTWF0aC5hYnMoK3RoaXMub3B0aW9ucy5tYXhQZXJjZW50KTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24gPSBNYXRoLmFicyh0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24pO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucy5vdXRlclN0cm9rZVdpZHRoID0gTWF0aC5hYnMoK3RoaXMub3B0aW9ucy5vdXRlclN0cm9rZVdpZHRoKTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMuaW5uZXJTdHJva2VXaWR0aCA9IE1hdGguYWJzKCt0aGlzLm9wdGlvbnMuaW5uZXJTdHJva2VXaWR0aCk7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zLmJhY2tncm91bmRQYWRkaW5nID0gK3RoaXMub3B0aW9ucy5iYWNrZ3JvdW5kUGFkZGluZztcclxuICAgIH07XHJcbiAgICBwcml2YXRlIGdldFJlbGF0aXZlWSA9IChyb3dOdW06IG51bWJlciwgcm93Q291bnQ6IG51bWJlcik6IHN0cmluZyA9PiB7XHJcbiAgICAgICAgLy8gd2h5ICctMC4xOGVtJz8gSXQncyBhIG1hZ2ljIG51bWJlciB3aGVuIHByb3BlcnR5ICdhbGlnbm1lbnQtYmFzZWxpbmUnIGVxdWFscyAnYmFzZWxpbmUnLiA6KVxyXG4gICAgICAgIGxldCBpbml0aWFsT2Zmc2V0ID0gLTAuMTgsIG9mZnNldCA9IDE7XHJcbiAgICAgICAgcmV0dXJuIChpbml0aWFsT2Zmc2V0ICsgb2Zmc2V0ICogKHJvd051bSAtIHJvd0NvdW50IC8gMikpLnRvRml4ZWQoMikgKyAnZW0nO1xyXG4gICAgfTtcclxuXHJcbiAgICBwcml2YXRlIG1pbiA9IChhOiBudW1iZXIsIGI6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIHJldHVybiBhIDwgYiA/IGEgOiBiO1xyXG4gICAgfTtcclxuXHJcbiAgICBwcml2YXRlIG1heCA9IChhOiBudW1iZXIsIGI6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIHJldHVybiBhID4gYiA/IGEgOiBiO1xyXG4gICAgfTtcclxuXHJcbiAgICBwcml2YXRlIHV1aWQgPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gaHR0cHM6Ly93d3cudzNyZXNvdXJjZS5jb20vamF2YXNjcmlwdC1leGVyY2lzZXMvamF2YXNjcmlwdC1tYXRoLWV4ZXJjaXNlLTIzLnBocFxyXG4gICAgICAgIHZhciBkdCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIHZhciB1dWlkID0gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbihjKSB7XHJcbiAgICAgICAgICAgIHZhciByID0gKGR0ICsgTWF0aC5yYW5kb20oKSoxNiklMTYgfCAwO1xyXG4gICAgICAgICAgICBkdCA9IE1hdGguZmxvb3IoZHQvMTYpO1xyXG4gICAgICAgICAgICByZXR1cm4gKGM9PSd4JyA/IHIgOihyJjB4M3wweDgpKS50b1N0cmluZygxNik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHV1aWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzRHJhd2luZygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuX3RpbWVyU3Vic2NyaXB0aW9uICYmICF0aGlzLl90aW1lclN1YnNjcmlwdGlvbi5jbG9zZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBmaW5kU3ZnRWxlbWVudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmKHRoaXMuc3ZnRWxlbWVudCA9PT0gbnVsbCl7XHJcbiAgICAgICAgICAgIGxldCB0YWdzID0gdGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzdmcnKTtcclxuICAgICAgICAgICAgaWYodGFncy5sZW5ndGg+MCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN2Z0VsZW1lbnQgPSB0YWdzWzBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaXNFbGVtZW50SW5WaWV3cG9ydCAoZWwpIDogQm9vbGVhbiB7XHJcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGlmIGVsIGhhcyBub3QgYmVlbiBjcmVhdGVkIGluIHBhZ2UuXHJcbiAgICAgICAgaWYoZWwgPT09IG51bGwgfHwgZWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBlbGVtZW50IGlzIG91dCBvZiB2aWV3IGR1ZSB0byBhIGNvbnRhaW5lciBzY3JvbGxpbmdcclxuICAgICAgICBsZXQgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBwYXJlbnQgPSBlbC5wYXJlbnROb2RlLCBwYXJlbnRSZWN0O1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgIHBhcmVudFJlY3QgPSBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICBpZiAocmVjdC50b3AgPj0gcGFyZW50UmVjdC5ib3R0b20pIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgIGlmIChyZWN0LmJvdHRvbSA8PSBwYXJlbnRSZWN0LnRvcCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgaWYgKHJlY3QubGVmdCA+PSBwYXJlbnRSZWN0LnJpZ2h0KSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICBpZiAocmVjdC5yaWdodCA8PSBwYXJlbnRSZWN0LmxlZnQpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xyXG4gICAgICAgIH0gd2hpbGUgKHBhcmVudCAhPSB0aGlzLmRvY3VtZW50LmJvZHkpO1xyXG4gICAgICAgIC8vIENoZWNrIGl0cyB3aXRoaW4gdGhlIGRvY3VtZW50IHZpZXdwb3J0XHJcbiAgICAgICAgaWYgKHJlY3QudG9wID49ICh0aGlzLndpbmRvdy5pbm5lckhlaWdodCB8fCB0aGlzLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYgKHJlY3QuYm90dG9tIDw9IDApIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAocmVjdC5sZWZ0ID49ICh0aGlzLndpbmRvdy5pbm5lcldpZHRoIHx8IHRoaXMuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGlmIChyZWN0LnJpZ2h0IDw9IDApIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjaGVja1ZpZXdwb3J0ID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZmluZFN2Z0VsZW1lbnQoKTtcclxuICAgICAgICBsZXQgcHJldmlvdXNWYWx1ZSA9IHRoaXMuaXNJblZpZXdwb3J0O1xyXG4gICAgICAgIHRoaXMuaXNJblZpZXdwb3J0ID0gdGhpcy5pc0VsZW1lbnRJblZpZXdwb3J0KHRoaXMuc3ZnRWxlbWVudCk7XHJcbiAgICAgICAgaWYocHJldmlvdXNWYWx1ZSAhPT0gdGhpcy5pc0luVmlld3BvcnQpIHtcclxuICAgICAgICAgICAgdGhpcy5vblZpZXdwb3J0Q2hhbmdlZC5lbWl0KHtvbGRWYWx1ZTogcHJldmlvdXNWYWx1ZSwgbmV3VmFsdWU6IHRoaXMuaXNJblZpZXdwb3J0fSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uU2Nyb2xsID0gKGV2ZW50OiBFdmVudCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY2hlY2tWaWV3cG9ydCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGxvYWRFdmVudHNGb3JMYXp5TW9kZSA9ICgpID0+IHtcclxuICAgICAgICBpZih0aGlzLm9wdGlvbnMubGF6eSl7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5vblNjcm9sbCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25TY3JvbGwsIHRydWUpO1xyXG4gICAgICAgICAgICBpZih0aGlzLl92aWV3cG9ydENoYW5nZWRTdWJzY3JpYmVyID09PSBudWxsKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdwb3J0Q2hhbmdlZFN1YnNjcmliZXIgPSB0aGlzLm9uVmlld3BvcnRDaGFuZ2VkLnN1YnNjcmliZSgoe29sZFZhbHVlLCBuZXdWYWx1ZX0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA/IHRoaXMucmVuZGVyKCkgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gc3ZnRWxlbWVudCBtdXN0IGJlIGNyZWF0ZWQgaW4gRE9NIGJlZm9yZSBiZWluZyBjaGVja2VkLlxyXG4gICAgICAgICAgICAvLyBJcyB0aGVyZSBhIGJldHRlciB3YXkgdG8gY2hlY2sgdGhlIGV4aXN0ZW5jZSBvZiBzdmdFbGVtbnQ/XHJcbiAgICAgICAgICAgIGxldCBfdGltZXIgPSB0aW1lcigwLCA1MCkuc3Vic2NyaWJlKCgpPT57XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN2Z0VsZW1lbnQgPT09IG51bGwgPyB0aGlzLmNoZWNrVmlld3BvcnQoKSA6IF90aW1lci51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1bmxvYWRFdmVudHNGb3JMYXp5TW9kZSA9ICgpID0+IHtcclxuICAgICAgICAvLyBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzXHJcbiAgICAgICAgdGhpcy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLm9uU2Nyb2xsLCB0cnVlKTtcclxuICAgICAgICB0aGlzLndpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uU2Nyb2xsLCB0cnVlKTtcclxuICAgICAgICAvLyBVbnN1YnNjcmliZSBvblZpZXdwb3J0Q2hhbmdlZFxyXG4gICAgICAgIGlmKHRoaXMuX3ZpZXdwb3J0Q2hhbmdlZFN1YnNjcmliZXIgIT09IG51bGwpe1xyXG4gICAgICAgICAgICB0aGlzLl92aWV3cG9ydENoYW5nZWRTdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZpZXdwb3J0Q2hhbmdlZFN1YnNjcmliZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpe1xyXG4gICAgICAgIHRoaXMubG9hZEV2ZW50c0ZvckxhenlNb2RlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKXtcclxuICAgICAgICB0aGlzLnVubG9hZEV2ZW50c0ZvckxhenlNb2RlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMucmVuZGVyKCk7XHJcblxyXG4gICAgICAgIGlmKCdsYXp5JyBpbiBjaGFuZ2VzKXtcclxuICAgICAgICAgICAgY2hhbmdlcy5sYXp5LmN1cnJlbnRWYWx1ZSA/IHRoaXMubG9hZEV2ZW50c0ZvckxhenlNb2RlKCkgOiB0aGlzLnVubG9hZEV2ZW50c0ZvckxhenlNb2RlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IoZGVmYXVsdE9wdGlvbnM6IENpcmNsZVByb2dyZXNzT3B0aW9ucywgcHJpdmF0ZSBlbFJlZjogRWxlbWVudFJlZiwgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnQpIHtcclxuICAgICAgICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7XHJcbiAgICAgICAgdGhpcy53aW5kb3cgPSB0aGlzLmRvY3VtZW50LmRlZmF1bHRWaWV3O1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5vcHRpb25zLCBkZWZhdWx0T3B0aW9ucyk7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmRlZmF1bHRPcHRpb25zLCBkZWZhdWx0T3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==